Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,W11-2123,W11-2138,0,"Heafield, 2011",0,"We used common tools for phrase-based translation? Moses (Koehn et al, 2007) decoder and tools, SRILM (Stolcke, 2002) and KenLM (Heafield, 2011) for language modelling and GIZA++ (Och and Ney, 2000) for word alignments","We used common tools for phrase-based translation Moses (Koehn et al, 2007) decoder and tools, SRILM (Stolcke, 2002) and KenLM (Heafield, 2011) for language modelling and GIZA++ (Och and Ney, 2000) for word alignments","'97','12','140'","<S ssid=""1"" sid=""97"">SRILM (Stolcke, 2002) is widely used within academia.</S><S ssid=""1"" sid=""12"">Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.</S><S ssid=""1"" sid=""140"">We have modified Moses (Koehn et al., 2007) to keep our state with hypotheses; to conserve memory, phrases do not keep state.</S>",['method_citation']
2,W11-2123,P14-2022,0,"Heafield, 2011",0,"The language model was com piled into KenLM probing format (Heafield, 2011) and placed in RAM while text phrase tables were forced into the disk cache before each run","The language model was compiled into KenLM probing format (Heafield, 2011) and placed in RAM while text phrase tables were forced into the disk cache before each run","'223','0','244','45','1'","<S ssid=""1"" sid=""223"">The binary language model from Section 5.2 and text phrase table were forced into disk cache before each run.</S><S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""244"">Time for Moses itself to load, including loading the language model and phrase table, is included.</S><S ssid=""1"" sid=""45"">The PROBING data structure is a rather straightforward application of these hash tables to store Ngram language models.</S><S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S>",['method_citation']
3,W11-2123,W12-3145,0,"Heafield, 2011",0,"Thus given afragment tf consisting of a sequence of target to kens, we compute LM scores for (i) < s& gt ;tf, (ii )tf and (iii )tf < /s& gt; and use the best score (only) for pruning.2 While this increases the number ofLM queries, we exploit the language model state in formation in KenLM (Heafield, 2011) to optimize the queries by saving the scores for the unchanged states","Thus given a fragment tf consisting of a sequence of target tokens, we compute LM scores for (i) < s& gt ;tf, (ii )tf and (iii )tf < /s& gt; and use the best score (only) for pruning. While this increases the number of LM queries, we exploit the language model state in formation in KenLM (Heafield, 2011) to optimize the queries by saving the scores for the unchanged states",'0',"<S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S>",['method_citation']
4,W11-2123,W12-3131,0,"Heafield, 2011",0,"Our translation system uses cdec (Dyer et al,2010), an implementation of the hierarchical phrase based translation model (Chiang, 2007) that uses the KenLM library (Heafield, 2011) for language model inference","Our translation system uses cdec (Dyer et al,2010), an implementation of the hierarchical phrase based translation model (Chiang, 2007) that uses the KenLM library (Heafield, 2011) for language model inference","'1','0','244','130'","<S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S><S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""244"">Time for Moses itself to load, including loading the language model and phrase table, is included.</S><S ssid=""1"" sid=""130"">Applications such as machine translation use language model probability as a feature to assist in choosing between hypotheses.</S>",['method_citation']
5,W11-2123,W12-3154,0,"Heafield, 2011",0,"The three data sets in use in this paper are summarised in Table 1.The translation systems consisted of phrase tables and lexicalised reordering tables estimated using the standard Moses (Koehn et al, 2007) training pipeline, and 5-gram Kneser-Ney smoothed language models estimated using the SRILM toolkit (Stolcke, 2002), with KenLM (Heafield, 2011) used at runtime","The three data sets in use in this paper are summarised in Table 1.The translation systems consisted of phrase tables and lexicalised reordering tables estimated using the standard Moses (Koehn et al, 2007) training pipeline, and 5-gram Kneser-Ney smoothed language models estimated using the SRILM toolkit (Stolcke, 2002), with KenLM (Heafield, 2011) used at runtime","'12','7'","<S ssid=""1"" sid=""12"">Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.</S><S ssid=""1"" sid=""7"">This paper presents methods to query N-gram language models, minimizing time and space costs.</S>",['method_citation']
6,W11-2123,P12-2058,0,"Heafield, 2011",0,"The features used are basic lexical features, word penalty and a 3-gram Language Model (Heafield, 2011)","The features used are basic lexical features, word penalty and a 3-gram Language Model (Heafield, 2011)","'11','52','0','184','68'","<S ssid=""1"" sid=""11"">Many packages perform language model queries.</S><S ssid=""1"" sid=""52"">Our implementation permits jumping to any n-gram of any length with a single lookup; this appears to be unique among language model implementations.</S><S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""184"">Sparse lookup is a key subproblem of language model queries.</S><S ssid=""1"" sid=""68"">The trie data structure is commonly used for language modeling.</S>",['method_citation']
7,W11-2123,W11-2139,0,2011,0,Inference was carried out using the language modeling library described by Heafield (2011),Inference was carried out using the language modeling library described by Heafield (2011),"'129','274','68','239','114'","<S ssid=""1"" sid=""129"">In addition to the optimizations specific to each datastructure described in Section 2, we implement several general optimizations for language modeling.</S><S ssid=""1"" sid=""274"">We have described two data structures for language modeling that achieve substantial reductions in time and memory cost.</S><S ssid=""1"" sid=""68"">The trie data structure is commonly used for language modeling.</S><S ssid=""1"" sid=""239"">Overall, language modeling significantly impacts decoder performance.</S><S ssid=""1"" sid=""114"">Later, BerkeleyLM (Pauls and Klein, 2011) described ideas similar to ours.</S>",['method_citation']
8,W11-2123,P13-2003,0,"Heafield, 2011",0,"We used the MADA ATB segmentation for Arabic (Roth et al, 2008) and true casing for English, phrases of maximal length 7, KneserNey smoothing, and lexicalized reordering (Koehn et al, 2005), and a 5-gram language model, trained on GigaWordv.5 using KenLM (Heafield, 2011)","We used the MADA ATB segmentation for Arabic (Roth et al, 2008) and true casing for English, phrases of maximal length 7, KneserNey smoothing, and lexicalized reordering (Koehn et al, 2005), and a 5-gram language model, trained on GigaWordv.5 using KenLM (Heafield, 2011)",'52',"<S ssid=""1"" sid=""52"">Our implementation permits jumping to any n-gram of any length with a single lookup; this appears to be unique among language model implementations.</S>",['method_citation']
9,W11-2123,W12-3134,0,2011,0,The approach we take is similar to work on efficiently storing large phrase tables by Zens and Ney (2007) and language mod els by Heafield (2011) and Pauls and Klein (2011)? both language model implementations are now integrated with Joshua,The approach we take is similar to work on efficiently storing large phrase tables by Zens and Ney (2007) and language models by Heafield (2011) and Pauls and Klein (2011)? both language model implementations are now integrated with Joshua,"'114','16','15'","<S ssid=""1"" sid=""114"">Later, BerkeleyLM (Pauls and Klein, 2011) described ideas similar to ours.</S><S ssid=""1"" sid=""16"">BerkeleyLM revision 152 (Pauls and Klein, 2011) implements tries based on hash tables and sorted arrays in Java with lossy quantization.</S><S ssid=""1"" sid=""15"">RandLM 0.2 (Talbot and Osborne, 2007) stores large-scale models in less memory using randomized data structures.</S>",['method_citation']
10,W11-2123,W12-3134,0,2011,0,Our quantization approach follows Federico and Bertoldi (2006) and Heafield (2011) in partitioning the value histogram into 256 equal-sized buckets,Our quantization approach follows Federico and Bertoldi (2006) and Heafield (2011) in partitioning the value histogram into 256 equal-sized buckets,'92',"<S ssid=""1"" sid=""92"">To quantize, we use the binning method (Federico and Bertoldi, 2006) that sorts values, divides into equally sized bins, and averages within each bin.</S>",['method_citation']
11,W11-2123,W12-3134,0,2011,0,"With the help of the respective original authors, the language model implementations by Heafield (2011) and Pauls and Klein (2011) have been integrated with Joshua, dropping support for the slower and more difficult to compile SRILM toolkit (Stolcke, 2002)","With the help of the respective original authors, the language model implementations by Heafield (2011) and Pauls and Klein (2011) have been integrated with Joshua, dropping support for the slower and more difficult to compile SRILM toolkit (Stolcke, 2002)","'97','12'","<S ssid=""1"" sid=""97"">SRILM (Stolcke, 2002) is widely used within academia.</S><S ssid=""1"" sid=""12"">Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.</S>",['method_citation']
12,W11-2123,W12-3160,0,"Heafield, 2011",0,"This was used to create a KenLM (Heafield, 2011)","This was used to create a KenLM (Heafield, 2011)",'189',"<S ssid=""1"" sid=""189"">The same numbers were used for each data structure.</S>",['method_citation']
13,W11-2123,W12-3706,0,"Heafield, 2011",0,"In the Opinum system we query the M p, M n mod els with the KenLM (Heafield, 2011) open-source library because it answers the queries very quickly and has a short loading time, which is suitable fora web application","In the Opinum system we query the M p, M n models with the KenLM (Heafield, 2011) open-source library because it answers the queries very quickly and has a short loading time, which is suitable for a web application","'7','1','8'","<S ssid=""1"" sid=""7"">This paper presents methods to query N-gram language models, minimizing time and space costs.</S><S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S><S ssid=""1"" sid=""8"">Queries take the form p(wn|wn−1 1 ) where wn1 is an n-gram.</S>",['method_citation']
14,W11-2123,W11-2147,0,"Heafield, 2011",0,"Our base line is a factored phrase based SMT system that uses the Moses toolkit (Koehn et al, 2007) for translation model training and decoding, GIZA++ (Ochand Ney, 2003) for word alignment, SRILM (Stolcke, 2002) an KenLM (Heafield, 2011) for language modelling and minimum error rate training (Och, 2003) to tune model feature weights","Our base line is a factored phrase based SMT system that uses the Moses toolkit (Koehn et al, 2007) for translation model training and decoding, GIZA++ (Ochand Ney, 2003) for word alignment, SRILM (Stolcke, 2002) an KenLM (Heafield, 2011) for language modelling and minimum error rate training (Och, 2003) to tune model feature weights","'12','1'","<S ssid=""1"" sid=""12"">Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.</S><S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S>",['method_citation']
15,W11-2123,E12-1083,0,"Heafield, 2011",0,"For language modeling, we computed 5-gram models using IRSTLM7 (Federico et al., 2008) and queried the model with KenLM (Heafield, 2011)","For language modeling, we computed 5-gram models using IRSTLM7 (Federico et al., 2008) and queried the model with KenLM (Heafield, 2011)","'103','0','13','7','223'","<S ssid=""1"" sid=""103"">IRSTLM (Federico et al., 2008) is an open-source toolkit for building and querying language models.</S><S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""13"">IRSTLM 5.60.02 (Federico et al., 2008) is a sorted trie implementation designed for lower memory consumption.</S><S ssid=""1"" sid=""7"">This paper presents methods to query N-gram language models, minimizing time and space costs.</S><S ssid=""1"" sid=""223"">The binary language model from Section 5.2 and text phrase table were forced into disk cache before each run.</S>",['method_citation']
16,W11-2123,P12-1002,0,"Heafield, 2011",0,"Furthermore, the extraction of grammars for training is done in a leave-one-out fashion (Zollmann and Sima ?an,2005) where rules are extracted for a parallel sentence pair only if the same rules are found in other sentences of the corpus as well.3-gram (news-commentary) and 5-gram (Europarl) language models are trained on the data described in Table 1, using the SRILM toolkit (Stolcke, 2002) and binarized for efficient querying using kenlm (Heafield, 2011)","Furthermore, the extraction of grammars for training is done in a leave-one-out fashion (Zollmann and Simaan,2005) where rules are extracted for a parallel sentence pair only if the same rules are found in other sentences of the corpus as well.3-gram (news-commentary) and 5-gram (Europarl) language models are trained on the data described in Table 1, using the SRILM toolkit (Stolcke, 2002) and binarized for efficient querying using kenlm (Heafield, 2011)",'12',"<S ssid=""1"" sid=""12"">Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke, 2002) is a popular toolkit based on tries used in several decoders.</S>",['method_citation']
17,W11-2123,D12-1108,0,"Heafield, 2011",0,"n-gram language model scores implemented with the KenLM toolkit (Heafield, 2011), 3","n-gram language model scores implemented with the KenLM toolkit (Heafield, 2011), 3","'0','131','52','7','165'","<S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""131"">Dynamic programming efficiently scores many hypotheses by exploiting the fact that an N-gram language model conditions on at most N − 1 preceding words.</S><S ssid=""1"" sid=""52"">Our implementation permits jumping to any n-gram of any length with a single lookup; this appears to be unique among language model implementations.</S><S ssid=""1"" sid=""7"">This paper presents methods to query N-gram language models, minimizing time and space costs.</S><S ssid=""1"" sid=""165"">The PROBING model can perform optimistic searches by jumping to any n-gram without needing state and without any additional memory.</S>",['method_citation']
18,W11-2123,P12-2006,0,"Heafield, 2011",0,"Research efforts to increase search efficiency for phrase-based MT (Koehn et al, 2003) have explored several directions, ranging from generalizing the stack decoding algorithm (Ortiz et al, 2006) to additional early pruning techniques (Delaney et al, 2006), (Moore and Quirk, 2007) and more efficient language model (LM) querying (Heafield, 2011)","Research efforts to increase search efficiency for phrase-based MT (Koehn et al, 2003) have explored several directions, ranging from generalizing the stack decoding algorithm (Ortiz et al, 2006) to additional early pruning techniques (Delaney et al, 2006), (Moore and Quirk, 2007) and more efficient language model (LM) querying (Heafield, 2011)",'1',"<S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S>",['method_citation']
19,W11-2123,P13-2073,0,"Heafield, 2011",0,"For English language modeling, we use English Giga word Corpus with 5-gram LM using the KenLM toolkit (Heafield, 2011)","For English language modeling, we use English Giga word Corpus with 5-gram LM using the KenLM toolkit (Heafield, 2011)",'0',"<S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S>",['method_citation']
20,W11-2123,P13-1109,0,"Heafield, 2011",0,"For the language model, we used the KenLM toolkit (Heafield, 2011) to create a 5-gram language model on the target side of the Europarl corpus (v7) with approximately 54M tokens with KneserNey smoothing","For the language model, we used the KenLM toolkit (Heafield, 2011) to create a 5-gram language model on the target side of the Europarl corpus (v7) with approximately 54M tokens with KneserNey smoothing","'0','1'","<S ssid=""1"" sid=""0"">KenLM: Faster and Smaller Language Model Queries</S><S ssid=""1"" sid=""1"">We present KenLM, a library that implements two data structures for efficient language model queries, reducing both time and costs.</S>",['method_citation']
