Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P11-1060,D11-1039,0,2011,0,"Clarkeet al (2010) and Liang et al (2011) describe approaches for learning semantic parsers from questions paired with database answers, while Goldwasser et al (2011) presents work on unsupervised learning","Clarke et al (2010) and Liang et al (2011) describe approaches for learning semantic parsers from questions paired with database answers, while Goldwasser et al (2011) presents work on unsupervised learning","['132', '165', '163', '9', '157']","<S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""165"" ssid = ""50"">These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S><S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""157"" ssid = ""42"">Eisenciations due to data sparsity  and having an insuffi- stein et al. (2009) induces conjunctive formulae and ciently large K. uses them as features in another learning problem.</S>",['Results_Citation']
2,P11-1060,P13-1092,0,2011,0,"In particular, Clarke et al (2010) and Liang et al (2011) proposed methods to learn from question answer pairs alone, which represents a significant advance","In particular, Clarke et al (2010) and Liang et al (2011) proposed methods to learn from question answer pairs alone, which represents a significant advance","['20', '160', '9', '132', '157']","<S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""160"" ssid = ""45"">To contrast  consider et al. (2010)  which we discussed earlier.</S><S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""157"" ssid = ""42"">Eisenciations due to data sparsity  and having an insuffi- stein et al. (2009) induces conjunctive formulae and ciently large K. uses them as features in another learning problem.</S>",['Method_Citation']
3,P11-1060,P13-1092,0,2011,0,"To handle syntax-semantics mismatch, GUSP introduces a novel dependency-based meaning representation 1Clarke et al (2010) and Liang et al (2011) used the annotated logical forms to compute answers for their experiments","To handle syntax-semantics mismatch, GUSP introduces a novel dependency-based meaning representation. Clarke et al (2010) and Liang et al (2011) used the annotated logical forms to compute answers for their experiments","['9', '20', '132', '163', '153']","<S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S><S sid =""153"" ssid = ""38"">Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere  but the fea- (Kamp and Reyle  1993; Kamp et al.  2005)  where tures favor some insertions depending on the words variables are discourse referents.</S>",['Method_Citation']
4,P11-1060,P13-1092,0,2011,0,"More recently, Liang et al (2011 )proposedDCS for dependency-based compositional semantics, which represents a semantic parse as a tree with nodes representing database elements and operations, and edges representing relational joins","More recently, Liang et al (2011) proposed DCS for dependency-based compositional semantics, which represents a semantic parse as a tree with nodes representing database elements and operations, and edges representing relational joins","['45', '49', '47', '25', '35']","<S sid =""45"" ssid = ""21"">The logical forms in DCS are called DCS trees  where nodes are labeled with predicates  and edges are labeled with relations.</S><S sid =""49"" ssid = ""25"">Aggregate relation DCS trees that only use join relations can represent arbitrarily complex compositional structures  but they cannot capture higherorder phenomena in language.</S><S sid =""47"" ssid = ""23"">This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure  which will facilitate parsing.</S><S sid =""25"" ssid = ""1"">We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS)  which captures the core idea of using trees to represent formal semantics.</S><S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S>",['Method_Citation']
5,P11-1060,P13-1092,0,"Liang et al, 2011",0,"GUSP represents meaning by a semantic tree, which is similar to DCS (Liang et al, 2011)","GUSP represents meaning by a semantic tree, which is similar to DCS (Liang et al, 2011)","['35', '25', '51', '21', '158']","<S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S><S sid =""25"" ssid = ""1"">We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS)  which captures the core idea of using trees to represent formal semantics.</S><S sid =""51"" ssid = ""27"">It is impossible to represent the semantics of this phrase with just a CSP  so we introduce a new aggregate relation  notated E. Consider a tree hE:ci  whose root is connected to a child c via E. If the denotation of c is a set of values s  the parent’s denotation is then a singleton set containing s. Formally: Figure 3(a) shows the DCS tree for our running example.</S><S sid =""21"" ssid = ""17"">The main technical contribution of this work is a new semantic representation  dependency-based compositional semantics (DCS)  which is both simple and expressive (Section 2).</S><S sid =""158"" ssid = ""43"">5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation  DCS  which offers a new perspective lexical semantics.</S>",['Method_Citation']
6,P11-1060,W12-2802,0,2011,0,"Matuszek et al [2010], Liang et al [2011] and Chen and Mooney [2011] describe models that learn compositional semantics, but word meanings are symbolic structures rather than patterns of features in the external world","Matuszek et al [2010], Liang et al [2011] and Chen and Mooney [2011] describe models that learn compositional semantics, but word meanings are symbolic structures rather than patterns of features in the external world","['165', '20', '166', '158', '163']","<S sid =""165"" ssid = ""50"">These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.</S><S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""166"" ssid = ""51"">Our employed (Zettlemoyer and Collins  2007) or words work pushes the grounded language agenda towards are given multiple lexical entries (Kwiatkowski et deeper representations of language—think grounded al.  2010). compositional semantics.</S><S sid =""158"" ssid = ""43"">5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation  DCS  which offers a new perspective lexical semantics.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S>",['Method_Citation']
7,P11-1060,P13-2009,0,"Liang et al, 2011",0,"It is well-studied in NLP, and a wide variety of methods have been proposed to tackle it ,e.g. rule-based (Popescu et al, 2003), super vised (Zelle, 1995), unsupervised (Goldwasser et al., 2011), and response-based (Liang et al, 2011)","It is well-studied in NLP, and a wide variety of methods have been proposed to tackle it ,e.g. rule-based (Popescu et al, 2003), super vised (Zelle, 1995), unsupervised (Goldwasser et al., 2011), and response-based (Liang et al, 2011)","['20', '165', '7', '153', '163']","<S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""165"" ssid = ""50"">These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.</S><S sid =""7"" ssid = ""3"">Supervised semantic parsers (Zelle and Mooney  1996; Tang and Mooney  2001; Ge and Mooney  2005; Zettlemoyer and Collins  2005; Kate and Mooney  2007; Zettlemoyer and Collins  2007; Wong and Mooney  2007; Kwiatkowski et al.  2010) rely on manual annotation of logical forms  which is expensive.</S><S sid =""153"" ssid = ""38"">Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere  but the fea- (Kamp and Reyle  1993; Kamp et al.  2005)  where tures favor some insertions depending on the words variables are discourse referents.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S>",['Method_Citation']
8,P11-1060,D12-1069,0,Liangetal2011,0,"One line of work eliminates the need for an annotated logical form, instead using only the correct answer for a database query (Liangetal2011) or even a binary correct/incorrect signal (Clarke et al2010)","One line of work eliminates the need for an annotated logical form, instead using only the correct answer for a database query (Lianget al 2011) or even a binary correct/incorrect signal (Clarke et al2010)","['9', '117', '142', '68', '15']","<S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""117"" ssid = ""2"">In each dataset  each sentence x is annotated with a Prolog logical form  which we use only to evaluate and get an answer y.</S><S sid =""142"" ssid = ""27"">This option is not available to us since we do not have annotated logical forms  so we must instead rely on lexical triggers to define the search space.</S><S sid =""68"" ssid = ""44"">The denotation of a DCS tree can now be defined recursively: The base case is defined in (3): if z is a single node with predicate p  then the denotation of z has one column with the tuples w(p) and an empty store.</S><S sid =""15"" ssid = ""11"">Unlike standard semantic parsing  our end goal is only to generate the correct y  so we are free to choose the representation for z.</S>",['Method_Citation']
9,P11-1060,N12-1049,0,2011,0,"For example, Liang et al (2011) constructs a latent parse similar in structure to a dependency grammar, but representing a logical form","For example, Liang et al (2011) constructs a latent parse similar in structure to a dependency grammar, but representing a logical form","['35', '163', '18', '3', '22']","<S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S><S sid =""18"" ssid = ""14"">CCG is one instantiation (Steedman  2000)  which is used by many semantic parsers  e.g.  Zettlemoyer and Collins (2005).</S><S sid =""3"" ssid = ""3"">In tackling this challenging learning problem  we introduce a new semantic representation which highlights a parallel between dependency syntax and efficient evaluation of logical forms.</S><S sid =""22"" ssid = ""18"">The logical forms in this framework are trees  which is desirable for two reasons: (i) they parallel syntactic dependency trees  which facilitates parsing and learning; and (ii) evaluating them to obtain the answer is computationally efficient.</S>",['Method_Citation']
10,P11-1060,P12-1045,0,2011,0,Clarke et al (2010) and Liang et al (2011) trained systems on question and answer pairs by automatically finding semantic interpretations of the questions that would generate the correct answers,Clarke et al (2010) and Liang et al (2011) trained systems on question and answer pairs by automatically finding semantic interpretations of the questions that would generate the correct answers,"['9', '132', '153', '20', '165']","<S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""153"" ssid = ""38"">Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere  but the fea- (Kamp and Reyle  1993; Kamp et al.  2005)  where tures favor some insertions depending on the words variables are discourse referents.</S><S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""165"" ssid = ""50"">These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.</S>",['Method_Citation']
11,P11-1060,P14-1008,0,"Liang et al,2011",0,"Dependency-based Compositional Semantics (DCS) provides an intuitive way to model semantics of questions, by using simple dependency-like trees (Liang et al, 2011)","Dependency-based Compositional Semantics (DCS) provides an intuitive way to model semantics of questions, by using simple dependency-like trees (Liang et al, 2011)","['36', '25', '21', '158', '35']","<S sid =""36"" ssid = ""12"">It is this transparency between syntax and semantics provided by DCS which leads to a simple and streamlined compositional semantics suitable for program induction.</S><S sid =""25"" ssid = ""1"">We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS)  which captures the core idea of using trees to represent formal semantics.</S><S sid =""21"" ssid = ""17"">The main technical contribution of this work is a new semantic representation  dependency-based compositional semantics (DCS)  which is both simple and expressive (Section 2).</S><S sid =""158"" ssid = ""43"">5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation  DCS  which offers a new perspective lexical semantics.</S><S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S>",['Method_Citation']
12,P11-1060,P14-1008,0,"Liang et al, 2011",0,"DCS trees has been proposed to represent natural language semantics with a structure similar to dependency trees (Liang et al, 2011) (Figure 1)","DCS trees has been proposed to represent natural language semantics with a structure similar to dependency trees (Liang et al, 2011) (Figure 1)","['35', '25', '47', '94', '49']","<S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S><S sid =""25"" ssid = ""1"">We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS)  which captures the core idea of using trees to represent formal semantics.</S><S sid =""47"" ssid = ""23"">This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure  which will facilitate parsing.</S><S sid =""94"" ssid = ""70"">We now turn to the task of mapping natural language For the example in Figure 4(b)  the de- utterances to DCS trees.</S><S sid =""49"" ssid = ""25"">Aggregate relation DCS trees that only use join relations can represent arbitrarily complex compositional structures  but they cannot capture higherorder phenomena in language.</S>",['Method_Citation']
13,P11-1060,P14-1008,0,"Liang et al, 2011",0,"are explained in? 2.5. 5http: //nlp.stanford.edu/software/corenlp.shtml 6 In (Liang et al, 2011) DCS trees are learned from QApairs and database entries","In (Liang et al, 2011) DCS trees are learned from QA pairs and database entries","['45', '107', '71', '95', '54']","<S sid =""45"" ssid = ""21"">The logical forms in DCS are called DCS trees  where nodes are labeled with predicates  and edges are labeled with relations.</S><S sid =""107"" ssid = ""83"">Our model is arc-factored  so we can sum over all DCS trees in ZL(x) using dynamic programming.</S><S sid =""71"" ssid = ""47"">Let z be a DCS tree.</S><S sid =""95"" ssid = ""71"">Our first question is: given notation of the DCS tree before execution is an utterance x  what trees z ∈ Z are permissible?</S><S sid =""54"" ssid = ""30"">A DCS tree that contains only join and aggregate relations can be viewed as a collection of treestructured CSPs connected via aggregate relations.</S>",['Results_Citation']
14,P11-1060,P14-1008,0,"Liang et al, 2011",0,"as in the sentence? Tropi cal storm Debby is blamed for death?, which is a tropical storm, is Debby, etc. Technically, each germ in a DCS tree indicates a variable when the DCS tree is translated to a FOL formula, and the abstract denotation of the germ corresponds to the set of consistent values (Liang et al, 2011) of that variable","Technically, each germ in a DCS tree indicates a variable when the DCS tree is translated to a FOL formula, and the abstract denotation of the germ corresponds to the set of consistent values (Liang et al, 2011) of that variable","['51', '46', '35', '68', '45']","<S sid =""51"" ssid = ""27"">It is impossible to represent the semantics of this phrase with just a CSP  so we introduce a new aggregate relation  notated E. Consider a tree hE:ci  whose root is connected to a child c via E. If the denotation of c is a set of values s  the parent’s denotation is then a singleton set containing s. Formally: Figure 3(a) shows the DCS tree for our running example.</S><S sid =""46"" ssid = ""22"">Formally: Definition 1 (DCS trees) Let Z be the set of DCS trees  where each z ∈ Z consists of (i) a predicate for each child i  the ji-th component of v must equal the j'i-th component of some t in the child’s denotation (t ∈ JciKw).</S><S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S><S sid =""68"" ssid = ""44"">The denotation of a DCS tree can now be defined recursively: The base case is defined in (3): if z is a single node with predicate p  then the denotation of z has one column with the tuples w(p) and an empty store.</S><S sid =""45"" ssid = ""21"">The logical forms in DCS are called DCS trees  where nodes are labeled with predicates  and edges are labeled with relations.</S>",['Method_Citation']
15,P11-1060,D11-1140,0,2011,0,Clarke et al (2010) and Liang et al (2011) replace semantic annotations in the training set with target answers which are more easily available,Clarke et al (2010) and Liang et al (2011) replace semantic annotations in the training set with target answers which are more easily available,"['20', '165', '132', '9', '163']","<S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""165"" ssid = ""50"">These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.</S><S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""163"" ssid = ""48"">Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).</S>",['Method_Citation']
16,P11-1060,D11-1140,0,"Liang et al, 2011",0,"and Collins, 2005, 2007),? -WASP (Wong and Mooney, 2007), UBL (Kwiatkowski et al, 2010) systems and DCS (Liang et al, 2011)","WASP (Wong and Mooney, 2007), UBL (Kwiatkowski et al, 2010) systems and DCS (Liang et al, 2011)","['7', '20', '158', '132', '81']","<S sid =""7"" ssid = ""3"">Supervised semantic parsers (Zelle and Mooney  1996; Tang and Mooney  2001; Ge and Mooney  2005; Zettlemoyer and Collins  2005; Kate and Mooney  2007; Zettlemoyer and Collins  2007; Wong and Mooney  2007; Kwiatkowski et al.  2010) rely on manual annotation of logical forms  which is expensive.</S><S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""158"" ssid = ""43"">5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation  DCS  which offers a new perspective lexical semantics.</S><S sid =""132"" ssid = ""17"">Results We first compare our system with Clarke et al. (2010) (henceforth  SEMRESP)  which also learns a semantic parser from question-answer pairs.</S><S sid =""81"" ssid = ""57"">In some sense  this is the technical core of DCS.</S>",['Method_Citation']
17,P11-1060,P13-1007,0,2011,0,"In general, every plural NPpotentially introduces an implicit universal, ranging 1For example, Liang et al (2011) in their state-of-the-art statistical semantic parser within the domain of natural language queries to databases, explicitly devise quantifier scoping in the semantic model","For example, Liang et al (2011) in their state-of-the-art statistical semantic parser within the domain of natural language queries to databases, explicitly devise quantifier scoping in the semantic model","['26', '149', '8', '100', '135']","<S sid =""26"" ssid = ""2"">We then introduce the full version (Section 2.2)  which handles linguistic phenomena such as quantification  where syntactic and semantic scope diverge.</S><S sid =""149"" ssid = ""34"">Think of DCS as a higher-level Our system learns lexical associations between programming language tailored to natural language  words and predicates.</S><S sid =""8"" ssid = ""4"">On the other hand  existing unsupervised semantic parsers (Poon and Domingos  2009) do not handle deeper linguistic phenomena such as quantification  negation  and superlatives.</S><S sid =""100"" ssid = ""76"">Model We now present our discriminative semantic parsing model  which places a log-linear distribution over z ∈ ZL(x) given an utterance x.</S><S sid =""135"" ssid = ""20"">SEMRESP requires a lexicon of 1.42 words per non-value predicate  WordNet features  and syntactic parse trees; DCS requires only words for the domain-independent predicates (overall  around 0.5 words per non-value predicate)  POS tags  and very simple indicator features.</S>",['Aim_Citation']
18,P11-1060,D11-1022,0,2011,0,"DD-ADMM may be useful in other frameworks involving logical constraints, such as the models for compositional semantics presented by Liang et al (2011)","DD-ADMM may be useful in other frameworks involving logical constraints, such as the models for compositional semantics presented by Liang et al (2011)","['22', '9', '153', '3', '172']","<S sid =""22"" ssid = ""18"">The logical forms in this framework are trees  which is desirable for two reasons: (i) they parallel syntactic dependency trees  which facilitates parsing and learning; and (ii) evaluating them to obtain the answer is computationally efficient.</S><S sid =""9"" ssid = ""5"">As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.</S><S sid =""153"" ssid = ""38"">Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere  but the fea- (Kamp and Reyle  1993; Kamp et al.  2005)  where tures favor some insertions depending on the words variables are discourse referents.</S><S sid =""3"" ssid = ""3"">In tackling this challenging learning problem  we introduce a new semantic representation which highlights a parallel between dependency syntax and efficient evaluation of logical forms.</S><S sid =""172"" ssid = ""57"">Free from the burden It also allows us to easily add new lexical triggers of annotating logical forms  we hope to use our without becoming mired in the semantic formalism. techniques in developing even more accurate and Quantifiers and superlatives significantly compli- broader-coverage language understanding systems. cate scoping in lambda calculus  and often type rais- Acknowledgments We thank Luke Zettlemoyer ing needs to be employed.</S>",['Results_Citation']
19,P11-1060,P12-1051,0,2011,0,"In fact, for any CFG G, it 1See Liang et al (2011) for work in representing lambda calculus expressions with trees","In fact, for any CFG G, it 1See Liang et al (2011) for work in representing lambda calculus expressions with trees","['20', '30', '156', '88', '35']","<S sid =""20"" ssid = ""16"">At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.</S><S sid =""30"" ssid = ""6"">A world w is mapping from each predicate p ∈ P to a set of tuples; for example  w(state) = {(CA)  (OR) ... }.</S><S sid =""156"" ssid = ""41"">There has been a fair amount of past work on no predicates)  confusion of Washington state with this topic: Liang et al. (2010) induces combinatory Washington D.C.  learning the wrong lexical asso- logic programs in a non-linguistic setting.</S><S sid =""88"" ssid = ""64"">Generalized Quantification (d.ri = Q) Generalized quantifiers are predicates on two sets  a restrictor A and a nuclear scope B.</S><S sid =""35"" ssid = ""11"">Although a DCS tree is a logical form  note that it looks like a syntactic dependency tree with predicates in place of words.</S>",['Aim_Citation']
