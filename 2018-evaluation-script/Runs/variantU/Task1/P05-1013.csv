Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P05-1013,W05-1505,0,"Nivre and Nilsson, 2005",0,"Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)","Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)","['62', '19', '109', '17', '10']","<S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""19"" ssid = ""15"">Finally  since non-projective constructions often involve long-distance dependencies  the problem is closely related to the recovery of empty categories and non-local dependencies in constituency-based parsing (Johnson  2002; Dienes and Dubey  2003; Jijkoun and de Rijke  2004; Cahill et al.  2004; Levy and Manning  2004; Campbell  2004).</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""17"" ssid = ""13"">There exist a few robust broad-coverage parsers that produce non-projective dependency structures  notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English  Foth et al. (2004) for German  and Holan (2004) for Czech.</S><S sid =""10"" ssid = ""6"">It is also true of the adaptation of the Collins parser for Czech (Collins et al.  1999) and the finite-state dependency parser for Turkish by Oflazer (2003).</S>",['Results_Citation']
2,P05-1013,P08-1006,0,"Nivre and Nilsson, 2005",0,"1http: //sourceforge.net/projects/mstparser Figure 1: CoNLL-X dependency tree Figure 2: Penn Treebank-style phrase structure tree KSDEP Sagae and Tsujii (2007)? s dependencyparser,2 based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)","Sagae and Tsujii (2007)'s dependency parser, based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)","['109', '20', '9', '62', '108']","<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""9"" ssid = ""5"">This is true of the widely used link grammar parser for English (Sleator and Temperley  1993)  which uses a dependency grammar of sorts  the probabilistic dependency parser of Eisner (1996)  and more recently proposed deterministic dependency parsers (Yamada and Matsumoto  2003; Nivre et al.  2004).</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""108"" ssid = ""19"">However  while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents  we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.</S>",['Method_Citation']
3,P05-1013,W10-1401,0,"Nivre and Nilsson, 2005",0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque","Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque","['17', '109', '62', '19', '20']","<S sid =""17"" ssid = ""13"">There exist a few robust broad-coverage parsers that produce non-projective dependency structures  notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English  Foth et al. (2004) for German  and Holan (2004) for Czech.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""19"" ssid = ""15"">Finally  since non-projective constructions often involve long-distance dependencies  the problem is closely related to the recovery of empty categories and non-local dependencies in constituency-based parsing (Johnson  2002; Dienes and Dubey  2003; Jijkoun and de Rijke  2004; Cahill et al.  2004; Levy and Manning  2004; Campbell  2004).</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S>",['Method_Citation']
4,P05-1013,P12-3029,0,"Nivre and Nilsson, 2005",0,"For tree banks with non-projective trees weuse the pseudo-projective parsing technique to trans form the tree bank into projective structures (Nivre and Nilsson, 2005)","For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)","['2', '20', '36', '109', '8']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998)  any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation  which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""8"" ssid = ""4"">Thus  most broad-coverage parsers based on dependency grammar have been restricted to projective structures.</S>",['Method_Citation']
5,P05-1013,W10-1403,0,"Nivre and Nilsson, 2005",0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)","It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)","['44', '36', '109', '23', '62']","<S sid =""44"" ssid = ""15"">Instead  we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.</S><S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998)  any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation  which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""23"" ssid = ""19"">By applying an inverse transformation to the output of the parser  arcs with non-standard labels can be lowered to their proper place in the dependency graph  giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S>",['Method_Citation']
6,P05-1013,D08-1008,0,"Nivre and Nilsson, 2005",0,"To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson,2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time","To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson, 2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time","['2', '22', '23', '36', '108']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""22"" ssid = ""18"">When the parser is trained on the transformed data  it will ideally learn not only to construct projective dependency structures but also to assign arc labels that encode information about lifts.</S><S sid =""23"" ssid = ""19"">By applying an inverse transformation to the output of the parser  arcs with non-standard labels can be lowered to their proper place in the dependency graph  giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.</S><S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998)  any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation  which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S><S sid =""108"" ssid = ""19"">However  while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents  we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.</S>",['Method_Citation']
7,P05-1013,D07-1013,0,2005,0,",wn in O (n) time, producing a projective dependency graph satisfying conditions 1? 4 in section 2.1, possibly after adding arcs (0, i ,lr) for every node i 6= 0 that is a root in the output graph (where lr is a special label for root modifiers) .Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to pre process training data and post-process parser output, so-called pseudo-projective parsing. To learn transition scores, these systems use discriminative learning methods ,e.g., memory-based learning or support vector machines","Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to preprocess training data and post-process parser output, so-called pseudo-projective parsing","['20', '109', '2', '62', '108']","<S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""108"" ssid = ""19"">However  while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents  we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.</S>",['Method_Citation']
8,P05-1013,D07-1119,0,2005,0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective","For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective","['22', '38', '23', '107', '109']","<S sid =""22"" ssid = ""18"">When the parser is trained on the transformed data  it will ideally learn not only to construct projective dependency structures but also to assign arc labels that encode information about lifts.</S><S sid =""38"" ssid = ""9"">Projectivizing a dependency graph by lifting nonprojective arcs is a nondeterministic operation in the general case.</S><S sid =""23"" ssid = ""19"">By applying an inverse transformation to the output of the parser  arcs with non-standard labels can be lowered to their proper place in the dependency graph  giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.</S><S sid =""107"" ssid = ""18"">Compared to related work on the recovery of long-distance dependencies in constituency-based parsing  our approach is similar to that of Dienes and Dubey (2003) in that the processing of non-local dependencies is partly integrated in the parsing process  via an extension of the set of syntactic categories  whereas most other approaches rely on postprocessing only.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",['Method_Citation']
9,P05-1013,N07-1050,0,"Nivre and Nilsson, 2005",0,"Whereas most of the early approaches were limited to strictly projective dependency structures, where the projection of a syntactic head must be continuous, attention has recently shifted to the analysis of non-projective structures, which are required for linguistically adequate representations, especially in languages with free or flexible word order. The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)","The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)","['109', '108', '9', '20', '2']","<S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""108"" ssid = ""19"">However  while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents  we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.</S><S sid =""9"" ssid = ""5"">This is true of the widely used link grammar parser for English (Sleator and Temperley  1993)  which uses a dependency grammar of sorts  the probabilistic dependency parser of Eisner (1996)  and more recently proposed deterministic dependency parsers (Yamada and Matsumoto  2003; Nivre et al.  2004).</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S>",['Method_Citation']
10,P05-1013,W09-1207,0,"Nivre and Nilsson, 2005",0,"troduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English","We adopt the pseudo-projective approach introduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English","['17', '113', '10', '62', '4']","<S sid =""17"" ssid = ""13"">There exist a few robust broad-coverage parsers that produce non-projective dependency structures  notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English  Foth et al. (2004) for German  and Holan (2004) for Czech.</S><S sid =""113"" ssid = ""3"">Special thanks to Jan Hajiˇc and Matthias Trautner Kromann for assistance with the Czech and Danish data  respectively  and to Jan Hajiˇc  Tom´aˇs Holan  Dan Zeman and three anonymous reviewers for valuable comments on a preliminary version of the paper.</S><S sid =""10"" ssid = ""6"">It is also true of the adaptation of the Collins parser for Czech (Collins et al.  1999) and the finite-state dependency parser for Turkish by Oflazer (2003).</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""4"" ssid = ""4"">This leads to the best reported performance for robust non-projective parsing of Czech.</S>",['Method_Citation']
11,P05-1013,E09-1034,0,"Nivre and Nilsson, 2005",0,"non projective (Nivre and Nilsson, 2005), we char ac terise a sense in which the structures appearing in tree banks can be viewed as being only? slightly? ill-nested","However, just as it has been noted that most non-projective structures appearing in practice are only 'slightly' non projective (Nivre and Nilsson, 2005), we characterise a sense in which the structures appearing in tree banks can be viewed as being only 'slightly' ill-nested","['2', '13', '6', '16', '83']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""13"" ssid = ""9"">The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.</S><S sid =""6"" ssid = ""2"">However  this argument is only plausible if the formal framework allows non-projective dependency structures  i.e. structures where a head and its dependents may correspond to a discontinuous constituent.</S><S sid =""16"" ssid = ""12"">Still  from a theoretical point of view  projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S><S sid =""83"" ssid = ""10"">It is worth noting that  although nonprojective constructions are less frequent in DDT than in PDT  they seem to be more deeply nested  since only about 80% can be projectivized with a single lift  while almost 95% of the non-projective arcs in PDT only require a single lift.</S>",['Method_Citation']
12,P05-1013,W09-1218,0,"Nivre and Nilsson, 2005",0,"In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)","In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)","['107', '47', '43', '44', '95']","<S sid =""107"" ssid = ""18"">Compared to related work on the recovery of long-distance dependencies in constituency-based parsing  our approach is similar to that of Dienes and Dubey (2003) in that the processing of non-local dependencies is partly integrated in the parsing process  via an extension of the set of syntactic categories  whereas most other approaches rely on postprocessing only.</S><S sid =""47"" ssid = ""18"">In practice  we can therefore expect a trade-off such that increasing the amount of information encoded in arc labels will cause an increase in the accuracy of the inverse transformation but a decrease in the accuracy with which the parser can construct the labeled representations.</S><S sid =""43"" ssid = ""14"">Unlike Kahane et al. (1998)  we do not regard a projectivized representation as the final target of the parsing process.</S><S sid =""44"" ssid = ""15"">Instead  we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.</S><S sid =""95"" ssid = ""6"">The second main result is that the pseudo-projective approach to parsing (using special arc labels to guide an inverse transformation) gives a further improvement of about one percentage point on attachment score.</S>",['Method_Citation']
13,P05-1013,C08-1081,0,"Nivre and Nilsson, 2005",0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)","Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)","['2', '8', '109', '17', '16']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""8"" ssid = ""4"">Thus  most broad-coverage parsers based on dependency grammar have been restricted to projective structures.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""17"" ssid = ""13"">There exist a few robust broad-coverage parsers that produce non-projective dependency structures  notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English  Foth et al. (2004) for German  and Holan (2004) for Czech.</S><S sid =""16"" ssid = ""12"">Still  from a theoretical point of view  projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.</S>",['Results_Citation']
14,P05-1013,C08-1081,0,2005,0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)","Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)","['20', '30', '62', '108', '109']","<S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""30"" ssid = ""1"">We assume that the goal in dependency parsing is to construct a labeled dependency graph of the kind depicted in Figure 1.</S><S sid =""62"" ssid = ""1"">In the experiments below  we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs 3 previously tested on Swedish (Nivre et al.  2004) and English (Nivre and Scholz  2004).</S><S sid =""108"" ssid = ""19"">However  while Dienes and Dubey recognize empty categories in a pre-processing step and only let the parser find their antecedents  we use the parser both to detect dislocated dependents and to predict either the type or the location of their syntactic head (or both) and use post-processing only to transform the graph in accordance with the parser’s analysis.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",['Method_Citation']
15,P05-1013,C08-1081,0,2005,0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,"['2', '20', '8', '109', '13']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""8"" ssid = ""4"">Thus  most broad-coverage parsers based on dependency grammar have been restricted to projective structures.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""13"" ssid = ""9"">The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.</S>",['Method_Citation']
16,P05-1013,C08-1081,0,2005,0,"Weprojectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph","We projectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph","['51', '49', '46', '69', '21']","<S sid =""51"" ssid = ""22"">In the second scheme  Head+Path  we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is p↓.</S><S sid =""49"" ssid = ""20"">The baseline simply retains the original labels for all arcs  regardless of whether they have been lifted or not  and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme  called Head  we use a new label d↑h for each lifted arc  where d is the dependency relation between the syntactic head and the dependent in the non-projective representation  and h is the dependency relation that the syntactic head has to its own head in the underlying structure.</S><S sid =""46"" ssid = ""17"">In principle  it would be possible to encode the exact position of the syntactic head in the label of the arc from the linear head  but this would give a potentially infinite set of arc labels and would make the training of the parser very hard.</S><S sid =""69"" ssid = ""8"">For each token  three types of features may be taken into account: the word form; the part-of-speech assigned by an automatic tagger; and labels on previously assigned dependency arcs involving the token – the arc from its head and the arcs to its leftmost and rightmost dependent  respectively.</S><S sid =""21"" ssid = ""17"">First  the training data for the parser is projectivized by applying a minimal number of lifting operations (Kahane et al.  1998) and encoding information about these lifts in arc labels.</S>",['Method_Citation']
17,P05-1013,D11-1006,0,"Nivre and Nilsson, 2005",0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)","For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)","['2', '20', '36', '109', '8']","<S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998)  any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation  which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S><S sid =""109"" ssid = ""1"">We have presented a new method for non-projective dependency parsing  based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S><S sid =""8"" ssid = ""4"">Thus  most broad-coverage parsers based on dependency grammar have been restricted to projective structures.</S>",['Aim_Citation']
18,P05-1013,P11-2121,0,"Nivre and Nilsson, 2005",0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases","Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases","['13', '71', '40', '49', '107']","<S sid =""13"" ssid = ""9"">The fact that projective dependency parsers can never exactly reproduce the analyses found in non-projective treebanks is often neglected because of the relative scarcity of problematic constructions.</S><S sid =""71"" ssid = ""10"">For robustness reasons  the parser may output a set of dependency trees instead of a single tree. most dependent of the next input token  dependency type features are limited to tokens on the stack.</S><S sid =""40"" ssid = ""11"">Even this may be nondeterministic  in case the graph contains several non-projective arcs whose lifts interact  but we use the following algorithm to construct a minimal projective transformation D0 = (W  A0) of a (nonprojective) dependency graph D = (W  A): The function SMALLEST-NONP-ARC returns the non-projective arc with the shortest distance from head to dependent (breaking ties from left to right).</S><S sid =""49"" ssid = ""20"">The baseline simply retains the original labels for all arcs  regardless of whether they have been lifted or not  and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme  called Head  we use a new label d↑h for each lifted arc  where d is the dependency relation between the syntactic head and the dependent in the non-projective representation  and h is the dependency relation that the syntactic head has to its own head in the underlying structure.</S><S sid =""107"" ssid = ""18"">Compared to related work on the recovery of long-distance dependencies in constituency-based parsing  our approach is similar to that of Dienes and Dubey (2003) in that the processing of non-local dependencies is partly integrated in the parsing process  via an extension of the set of syntactic categories  whereas most other approaches rely on postprocessing only.</S>",['Results_Citation']
19,P05-1013,E06-1010,0,"Nivre and Nilsson, 2005",0,"Itshould be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in them selves (Nivre and Nilsson, 2005)","It should be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in themselves (Nivre and Nilsson, 2005)","['14', '94', '92', '19', '49']","<S sid =""14"" ssid = ""10"">While the proportion of sentences containing non-projective dependencies is often 15–25%  the total proportion of non-projective arcs is normally only 1–2%.</S><S sid =""94"" ssid = ""5"">The first thing to note is that projectivizing helps in itself  even if no encoding is used  as seen from the fact that the projective baseline outperforms the non-projective training condition by more than half a percentage point on attachment score  although the gain is much smaller with respect to exact match.</S><S sid =""92"" ssid = ""3"">Evaluation metrics used are Attachment Score (AS)  i.e. the proportion of tokens that are attached to the correct head  and Exact Match (EM)  i.e. the proportion of sentences for which the dependency graph exactly matches the gold standard.</S><S sid =""19"" ssid = ""15"">Finally  since non-projective constructions often involve long-distance dependencies  the problem is closely related to the recovery of empty categories and non-local dependencies in constituency-based parsing (Johnson  2002; Dienes and Dubey  2003; Jijkoun and de Rijke  2004; Cahill et al.  2004; Levy and Manning  2004; Campbell  2004).</S><S sid =""49"" ssid = ""20"">The baseline simply retains the original labels for all arcs  regardless of whether they have been lifted or not  and the number of distinct labels is therefore simply the number n of distinct dependency types.2 In the first encoding scheme  called Head  we use a new label d↑h for each lifted arc  where d is the dependency relation between the syntactic head and the dependent in the non-projective representation  and h is the dependency relation that the syntactic head has to its own head in the underlying structure.</S>",['Aim_Citation']
20,P05-1013,D07-1111,0,"Nivre and Nilsson, 2005",0,"The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective trans formations as described in (Nivre and Nilsson, 2005)","The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective transformations as described in (Nivre and Nilsson, 2005)","['72', '112', '36', '20', '2']","<S sid =""72"" ssid = ""11"">The prediction based on these features is a knearest neighbor classification  using the IB1 algorithm and k = 5  the modified value difference metric (MVDM) and class voting with inverse distance weighting  as implemented in the TiMBL software package (Daelemans et al.  2003).</S><S sid =""112"" ssid = ""2"">Memory-based classifiers for the experiments were created using TiMBL (Daelemans et al.  2003).</S><S sid =""36"" ssid = ""7"">As observed by Kahane et al. (1998)  any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation  which replaces each non-projective arc wj wk by a projective arc wi —* wk such that wi —*∗ wj holds in the original graph.</S><S sid =""20"" ssid = ""16"">In this paper  we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.</S><S sid =""2"" ssid = ""2"">We show how a datadriven deterministic dependency parser  in itself restricted to projective structures  can be combined with graph transformation techniques to produce non-projective structures.</S>","['Aim_Citation', 'Results_Citation']"
