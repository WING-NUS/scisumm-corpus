Although embedding this version of LCFRS's in the framework of ILFP developed by Rounds (1985) is straightforward  our motivation was to capture properties shared by a family of grammatical systems and generalize them defining a class of related formalisms.We have studied the structural descriptions (tree sets) that can be assigned by various grammatical systems  and classified these formalisms on the basis of two features: path complexity; and path independence.In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.Formalisms such as the restricted indexed grammars (Gazdar  1985) and members of the hierarchy of grammatical systems given by Weir (1987) have independent paths  but more complex path sets.In the remainder of the paper  we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.This suggests that by generalizing the notion of context-freeness in CFG's  we can define a class of grammatical formalisms that manipulate more complex structures.For example  Gazdar (1985) discusses the applicability of Indexed Grammars (IG's) to Natural Language in terms of the structural descriptions assigned; and Berwick (1984) discusses the strong generative capacity of Lexical-Functional Grammar (LFG) and Government and Bindings grammars (GB).We outlined the definition of a family of constrained grammatical formalisms  called Linear Context-Free Rewriting Systems.However  in order to capture the properties of various grammatical systems under consideration  our notation is more restrictive that ILFP  which was designed as a general logical notation to characterize the complete class of languages that are recognizable in polynomial time.Since every CFL is known to be semilinear (Parikh  1966)  in order to show semilinearity of some language  we need only show the existence of a letter equivalent CFL Our definition of LCFRS's insists that the composition operations are linear and nonerasing.Semilinearity and the closely related constant growth property (a consequence of semilinearity) have been discussed in the context of grammars for natural languages by Joshi (1983/85) and Berwick and Weinberg (1984).Bresnan  Kaplan  Peters  and Zaenen (1982) argue that these structures are needed to describe crossed-serial dependencies in Dutch subordinate clauses.These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.For example  the formalisms in the hierarchy described above generate semilinear languages although their path sets become increasingly more complex as one moves up the hierarchy.An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.In this paper  our goal has been to use the notion of LCFRS's to classify grammatical systems on the basis of their strong generative capacity.We contrasted formalisms such as CFG's  HG's  TAG's and MCTAG's  with formalisms such as IG's and unificational systems such as LFG's and FUG's.Much of the study of grammatical systems in computational linguistics has been focused on the weak generative capacity of grammatical formalism.Gazdar (1985) argues this is the appropriate analysis of unbounded dependencies in the hypothetical Scandinavian language Norwedish.From the point of view of recognition  independent paths in the derivation structures suggests that a top-down parser (for example) can work on each branch independently  which may lead to efficient parsing using an algorithm based on the Divide and Conquer technique.This pumping lemma states that if there is tree  t = t2t3t4t5  generated by a TAG G  such that its height is more than a predetermined bound k  then all trees of the form ti it tstt ts for each i > 0 will also generated by G. Similarly  for tree sets with independent paths and more complex path sets  tree pumping lemmas can be given.As in the case of the derivation trees of CFG's  nodes are labeled by a member of some finite set of symbols (perhaps only implicit in the grammar as in TAG's) used to denote derived structures.Thus  the length of any string in L is a linear combination of the length of strings in some fixed finite subset of L  and thus L is said to have the constant growth property.In addition  the restricted version of CG's (discussed in Section 6) generates tree sets with independent paths and we hope that it can be included in a more general definition of LCFRS's containing formalisms whose tree sets have path sets that are themselves LCFRL's (as in the case of the restricted indexed grammars  and the hierarchy defined by Weir).Roughly speaking  we say that a tee set contains trees with dependent paths if there are two paths p.  = vim.  and g.  = in each 7 E r such that v.  is some  possibly empty  shared initial subpath; v.  and wi are not bounded in length; and there is some &quot;dependence&quot; (such as equal length) between the set of all v.  and w.  for each 7 Er.We assume that M is in an existential state qA  with integers i1 and i2 representing zi in the (2i — 1)th and 22th work tape  for 1 < i < k. For each rule p : A fp(B  C) such that fp is mapped onto the function fp defined by the following rule. jp((xi .. •  rnt)  (1ii  • • • • Yn3))= (Zi   • • •   Zk) M breaks xi   zk into substrings xi    xn  and yi ... y&quot; conforming to the definition of fp.If 0(A) gives the number of occurrences of each terminal in the structure named by A  then  given the constraints imposed on the formalism  for each rule A --. fp(Ai    An) we have the equality where c„ is some constant.For rules p : A fpo such that fp is constant function  giving an elementary structure  fp is defined such that fp() = (Si ... xi() where each z is a constant string.We consider properties of the tree sets generated by CFG's  Tree Adjoining Grammars (TAG's)  Head Grammars (HG's)  Categorial Grammars (CG's)  and IG's.The similarities become apparent when they are studied at the level of derivation structures: derivation nee sets of CFG's  HG's  TAG's  and MCTAG's are all local sets.These two properties of the tree sets are not only linguistically relevant  but also have computational importance.The work of Rounds (1969) shows that the path sets of trees derived by IG's (like those of TAG's) are context-free languages.As with HG's derivation structures are annotated; in the case of TAG's  by the trees used for adjunction and addresses of nodes of the elementary tree where adjunctions occurred.Thus  the tree sets generated by HG's are similar to those of CFG's  with each node annotated by the operation (concatenation or wrapping) used to combine the headed strings derived by the daughters of Tree Adjoining Grammars  a tree rewriting formalism  was introduced by Joshi  Levy and Takahashi (1975) and Joshi (1983/85).We use Alternating Turing Machines (Chandra  Kozen  and Stockmeyer  1981) to show that polynomial time recognition is possible for the languages discussed in Section 4.3.