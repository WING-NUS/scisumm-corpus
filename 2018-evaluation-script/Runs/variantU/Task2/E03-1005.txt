The derivation with the smallest sum  or highest rank  is taken as the final best derivation producing the best parse tree in Simplicity-DOP.3 Although Bod (2000b) reports that Simplicity DOP is outperformed by Likelihood-DOP  its results are still rather impressive for such a simple model.In this paper  we will estimate the most probable parse by computing the 10 000 most probable derivations by means of Viterbi n-best  from which the most likely parse is estimated by summing up the probabilities of the derivations that generate the same parse.Sima'an (1995) gave an efficient algorithm for computing the parse tree generated by the most probable derivation  which in some cases is a reasonable approximation of the most probable parse.However  as mentioned above  efficient parsing does not necessarily mean efficient disambiguation: the exact computation of the most probable parse remains exponential.Most previous notions of best parse tree in DOP1 were based on a probabilistic metric  with Bod (2000b) as a notable exception  who used a simplicity metric based on the shortest derivation.This paper showed that a PCFG-reduction of DOP in combination with a new notion of the best parse tree results in fast processing times and very competitive accuracy on the Wall Street Journal treebank.In the following section first results of SL-DOP and LS-DOP with a compact PCFG-reduction. we will see that our new definition of best parse tree also outperforms the best results obtained in Bod (2001).While the PCFG reduction of Bod (2001) obtains state-of-the-art results on the WSJ  comparable to Charniak (2000)  Bonnema et al. 's estimator performs worse and is comparable to Collins (1996).Although Bod's method obtains very competitive results on the Wall Street Journal (WSJ) task  the parsing time was reported to be over 200 seconds per sentence (Bod 2003).While Bod (2001) needed to use a very large sample from the WSJ subtrees to do this  Goodman's method can do the same job with a more compact grammar.DOP1 has a serious bias: its subtree estimator provides more probability to nodes with more subtrees (Bonnema et al. 1999).Moreover  Goodman's PCFG reduction may also be used to estimate the most probable parse by Viterbi n-best search which computes the n most likely derivations and then sums up the probabilities of the derivations producing the same tree.Let tid be the i-th subtree in the derivation d that produces tree T  then the probability of T is given by Thus DOP1 considers counts of subtrees of a wide range of sizes in computing the probability of a tree: everything from counts of single-level rules to counts of entire trees.Bonnema et al. (1999) observed that another problem with DOP1's subtree-estimation method is that it provides more probability to nodes with more subtrees  and therefore more probability to larger subtrees.Bod (2000a) solved this problem by training the subtree probabilities by a maximum likelihood procedure based on Expectation-Maximization.In this paper  we will test a simple extension of Goodman's compact PCFG-reduction of DOP which has the same property as the normalization proposed in Bod (2001) in that it assigns roughly equal weight to each node in the training data.As to the processing time  the PCFG reduction parses each sentence 100 words) in 3.6 seconds average  while the parser in Bod (2001  2003)  which uses over 5 million subtrees  is reported to take about 220 seconds per sentence.Bod (1993) showed how standard parsing techniques can be applied to DOP1 by converting subtrees into rules.We employed the same unknown (category) word model as in Bod (2001)  based on statistics on word-endings  hyphenation and capitalization in combination with Good-Turing (Bod 1998: 85 87).We will refer to these models as Likelihood-DOP models  but in this paper we will specifically mean by &quot;Likelihood-DOP&quot; the PCFG-reduction of Bod (2001) given in Section 2.2.This suggests that a model which combines these two notions of best parse may boost the accuracy.To appreciate these innovations  it should be noted that the model was radically different from all other statistical parsing models at the time.As our second experimental goal  we compared the models SL-DOP and LS-DOP explained in Section 3.2.This may be explained by the fact our best results in Bod (2001) were obtained by testing various subtree restrictions until the highest accuracy was obtained  while in the current experiment we used all subtrees as given by the PCFG-reduction.It should be mentioned that the best precision and recall scores reported in Bod (2001) are slightly better than the ones reported here (the difference is only 0.2% for sentences 100 words).Fortunately  there exists a compact PCFG-reduction of DOP1 that generates the same trees with the same probabilities  as shown by Goodman (1996  2002).Bod (2001) used an alternative technique which samples a fixed number of subtrees of each depth and which has the effect of assigning roughly equal weight to each node in the training data.For example  Bod (2001) samples a fixed number of subtrees of each depth  which has the effect of assigning roughly equal weight to each node in the training data  and roughly exponentially less probability for larger trees (see Goodman 2002: 12).Two apparently opposing DOP models exist in the literature: one which computes the parse tree involving the most frequent subtrees from a treebank and one which computes the parse tree involving the fewest subtrees from a treebank.Most DOP models  such as in Bod (1993)  Goodman (1996)  Bonnema et al. (1997)  Sima'an (2000) and Collins & Duffy (2002)  use a likelihood criterion in defining the best parse tree: they take (some notion of) the most likely (i.e. most probable) tree as a candidate for the best tree of a sentence.Many implementations of DOP1 therefore estimate the most probable parse by Monte Carlo techniques (Bod 1998; Chappelier & Rajman 2000)  or by Viterbi n-best search (Bod 2001)  or by restricting the set of subtrees (Sima'an 1999; Chappelier et al. 2002).Bonnema et al. (1999) show that as a consequence too much weight is given to larger subtrees  and that the parse accuracy of DOP1 deteriorates if (very) large subtrees are included.In Bod (2000b)  an alternative notion for the best parse tree was proposed based on a simplicity criterion: instead of producing the most probable tree  this model produced the tree generated by the shortest derivation with the fewest training subtrees.In case the shortest derivation is not unique  Bod (2000b) proposes to back off to a frequency ordering of the subtrees.We show that a combination of a probabilistic and a simplicity metric  which chooses the simplest parse from the n likeliest parses  outperforms the use of these metrics alone.Bod reports state-of-the-art results with this method  and observes no decrease in parse accuracy when larger subtrees are included (using subtrees up to depth 14).Goodman (1996  2002) further illustrates this by a node A @j of the following form: To see how many subtrees it has  Goodman first considers the possibilities of the left branch.Goodman (2002) furthermore showed how Bonnema et al. 's (1999) and Bod's (2001) estimators can be incorporated in his PCFGreduction  but did not report any experiments with these reductions.This paper presents the first published results with Goodman's PCFG-reductions of both Bonnema et al. 's (1999) and Bod's (2001) estimators on the WSJ.