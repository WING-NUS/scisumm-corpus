Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P87-1015,P01-1018,0,1987,0,"The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","['2', '222', '159', '64', '15']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""222"" ssid = ""28"">However  in order to capture the properties of various grammatical systems under consideration  our notation is more restrictive that ILFP  which was designed as a general logical notation to characterize the complete class of languages that are recognizable in polynomial time.</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S><S sid =""64"" ssid = ""49"">Steedman (1986) considers Categorial Grammars in which both the operations of function application and composition may be used  and in which function can specify whether they take their arguments from their right or left.</S><S sid =""15"" ssid = ""13"">In this paper  we outline how such family of formalisms can be defined  and show that like CFG's  each member possesses a number of desirable linguistic and computational properties: in particular  the constant growth property and polynomial recognizability.</S>",['Method_Citation']
2,P87-1015,E09-1055,0,"Vijay-Shanker et al, 1987",0,"Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","['153', '136', '148', '2', '159']","<S sid =""153"" ssid = ""38"">In this section for the purposes of showing that polynomial time recognition is possible  we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.</S><S sid =""136"" ssid = ""21"">These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &quot;size&quot; is the sum of its constituents plus some constant For example  the operation 4  discussed in the case of CFG's (in Section 4.1) adds the constant equal to the sum of the length of the strings VI  un+r• Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.</S><S sid =""148"" ssid = ""33"">If 0(A) gives the number of occurrences of each terminal in the structure named by A  then  given the constraints imposed on the formalism  for each rule A --. fp(Ai    An) we have the equality where c„ is some constant.</S><S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S>",['Method_Citation']
3,P87-1015,W07-2214,0,"Vijay-Shanker et al, 1987",0,"There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","['62', '96', '10', '122', '52']","<S sid =""62"" ssid = ""47"">TAG's can be shown to be equivalent to this restricted system.</S><S sid =""96"" ssid = ""2"">A tree set may be said to have dependencies between paths if some &quot;appropriate&quot; subset can be shown to have dependent paths as defined above.</S><S sid =""10"" ssid = ""8"">These two properties of the tree sets are not only linguistically relevant  but also have computational importance.</S><S sid =""122"" ssid = ""7"">These operations  as we see below  are restricted to be size preserving (as in the case of concatenation in CFG) which implies that they will be linear and non-erasing.</S><S sid =""52"" ssid = ""37"">Informally  two or more paths can be dependent on each other: for example  they could be required to be of equal length as in the trees in Figure 4. generates such a tree set.</S>",['Method_Citation']
4,P87-1015,P09-2003,0,nan,0,"They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","['217', '122', '225', '74', '209']","<S sid =""217"" ssid = ""23"">In considering the recognition of these languages  we were forced to be more specific regarding the relationship between the structures derived by these formalisms and the substrings they span.</S><S sid =""122"" ssid = ""7"">These operations  as we see below  are restricted to be size preserving (as in the case of concatenation in CFG) which implies that they will be linear and non-erasing.</S><S sid =""225"" ssid = ""31"">As discussed in Section 3  independent paths in tree sets  rather than the path complexity  may be crucial in characterizing semilinearity and polynomial time recognition.</S><S sid =""74"" ssid = ""59"">An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.</S><S sid =""209"" ssid = ""15"">Like HG's  TAG's  and MCTAG's  members of LCFRS can manipulate structures more complex than terminal strings and use composition operations that are more complex that concatenation.</S>",['Implication_Citation']
5,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","['232', '2', '148', '89', '177']","<S sid =""232"" ssid = ""38"">In considering this aspect of a formalism  we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism  and the properties of semilinearity and polynomial recognizability.</S><S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""148"" ssid = ""33"">If 0(A) gives the number of occurrences of each terminal in the structure named by A  then  given the constraints imposed on the formalism  for each rule A --. fp(Ai    An) we have the equality where c„ is some constant.</S><S sid =""89"" ssid = ""74"">Hence  trees shown in Figure 8 can not be generated by any MCTAG (but can be generated by an IG) because the number of pairs of dependent paths grows with n. Since the derivation tees of TAG's  MCTAG's  and HG's are local sets  the choice of the structure used at each point in a derivation in these systems does not depend on the context at that point within the derivation.</S><S sid =""177"" ssid = ""62"">In the next section  we show how an ATM can accept the strings generated by a grammar in a LCFRS formalism in logspace  and hence show that each family can be recognized in polynomial time.</S>",['Method_Citation']
6,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","['2', '159', '9', '35', '232']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S><S sid =""9"" ssid = ""7"">We examine both the complexity of the paths of trees in the tree sets  and the kinds of dependencies that the formalisms can impose between paths.</S><S sid =""35"" ssid = ""20"">TAG's can be used to give the structural descriptions discussed by Gazdar (1985) for the unbounded nested dependencies in Norwedish  for cross serial dependencies in Dutch subordinate clauses  and for the nestings of paired English complementizers.</S><S sid =""232"" ssid = ""38"">In considering this aspect of a formalism  we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism  and the properties of semilinearity and polynomial recognizability.</S>",['Method_Citation']
7,P87-1015,P07-1021,0,"Vijay-Shanker et al, 1987",0,"We write REGD.k/ to refer to the class of regular dependency languages with a gap-degree bounded by k. Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","['92', '207', '118', '2', '117']","<S sid =""92"" ssid = ""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid =""207"" ssid = ""13"">We outlined the definition of a family of constrained grammatical formalisms  called Linear Context-Free Rewriting Systems.</S><S sid =""118"" ssid = ""3"">In the remainder of the paper  we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""117"" ssid = ""2"">Our goal is to define a class of formal systems  and show that any member of this class will possess certain attractive properties.</S>",['Method_Citation']
8,P87-1015,N09-1061,0,"Vijay-Shanker et al, 1987",0,"This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006) .In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006). In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","['2', '9', '232', '159', '229']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""9"" ssid = ""7"">We examine both the complexity of the paths of trees in the tree sets  and the kinds of dependencies that the formalisms can impose between paths.</S><S sid =""232"" ssid = ""38"">In considering this aspect of a formalism  we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism  and the properties of semilinearity and polynomial recognizability.</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S><S sid =""229"" ssid = ""35"">In addition  the restricted version of CG's (discussed in Section 6) generates tree sets with independent paths and we hope that it can be included in a more general definition of LCFRS's containing formalisms whose tree sets have path sets that are themselves LCFRL's (as in the case of the restricted indexed grammars  and the hierarchy defined by Weir).</S>",['Method_Citation']
9,P87-1015,N09-1061,0,1987,0,"We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","['2', '159', '35', '9', '108']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S><S sid =""35"" ssid = ""20"">TAG's can be used to give the structural descriptions discussed by Gazdar (1985) for the unbounded nested dependencies in Norwedish  for cross serial dependencies in Dutch subordinate clauses  and for the nestings of paired English complementizers.</S><S sid =""9"" ssid = ""7"">We examine both the complexity of the paths of trees in the tree sets  and the kinds of dependencies that the formalisms can impose between paths.</S><S sid =""108"" ssid = ""14"">We adapt the string pumping lemma for the class of languages corresponding to the complexity of the path set.</S>",['Method_Citation']
10,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"LCFRS (Vijay-Shanker et al, 1987) are anatural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","LCFRS (Vijay-Shanker et al, 1987) are a natural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","['60', '141', '140', '173', '54']","<S sid =""60"" ssid = ""45"">Gazdar (1985) considers a restriction of IG's in which no more than one nonterminal on the right-hand-side of a production can inherit the stack from the left-hand-side.</S><S sid =""141"" ssid = ""26"">Thus  the length of any string in L is a linear combination of the length of strings in some fixed finite subset of L  and thus L is said to have the constant growth property.</S><S sid =""140"" ssid = ""25"">Roughly speaking  a language  L  has the property of semilinearity if the number of occurrences of each symbol in any string is a linear combination of the occurrences of these symbols in some fixed finite set of strings.</S><S sid =""173"" ssid = ""58"">A configuration of M consists of a state of the finite control  the nonblank contents of the input tape and k work tapes  and the position of each head.</S><S sid =""54"" ssid = ""39"">An IG can be viewed as a CFG in which each nonterminal is associated with a stack.</S>",['Implication_Citation']
11,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S )wherea) N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S ) where N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","['173', '141', '34', '140', '45']","<S sid =""173"" ssid = ""58"">A configuration of M consists of a state of the finite control  the nonblank contents of the input tape and k work tapes  and the position of each head.</S><S sid =""141"" ssid = ""26"">Thus  the length of any string in L is a linear combination of the length of strings in some fixed finite subset of L  and thus L is said to have the constant growth property.</S><S sid =""34"" ssid = ""19"">It can be shown that the path set of the tree set generated by a TAG G is a context-free language.</S><S sid =""140"" ssid = ""25"">Roughly speaking  a language  L  has the property of semilinearity if the number of occurrences of each symbol in any string is a linear combination of the occurrences of these symbols in some fixed finite set of strings.</S><S sid =""45"" ssid = ""30"">To show that the derivation tree set of a TAG is a local set  nodes are labeled by pairs consisting of the name of an elementary tree and the address at which it was adjoined  instead of labelling edges with addresses.</S>",['Method_Citation']
12,P87-1015,E09-1053,0,1987,0,"In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","['2', '196', '217', '232', '64']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""196"" ssid = ""2"">We contrasted formalisms such as CFG's  HG's  TAG's and MCTAG's  with formalisms such as IG's and unificational systems such as LFG's and FUG's.</S><S sid =""217"" ssid = ""23"">In considering the recognition of these languages  we were forced to be more specific regarding the relationship between the structures derived by these formalisms and the substrings they span.</S><S sid =""232"" ssid = ""38"">In considering this aspect of a formalism  we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism  and the properties of semilinearity and polynomial recognizability.</S><S sid =""64"" ssid = ""49"">Steedman (1986) considers Categorial Grammars in which both the operations of function application and composition may be used  and in which function can specify whether they take their arguments from their right or left.</S>",['Implication_Citation']
13,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"2 By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of deriva tional structures are all regular (Vijay-Shanker et al., 1987)","By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of derivational structures are all regular (Vijay-Shanker et al., 1987)","['229', '159', '39', '2', '128']","<S sid =""229"" ssid = ""35"">In addition  the restricted version of CG's (discussed in Section 6) generates tree sets with independent paths and we hope that it can be included in a more general definition of LCFRS's containing formalisms whose tree sets have path sets that are themselves LCFRL's (as in the case of the restricted indexed grammars  and the hierarchy defined by Weir).</S><S sid =""159"" ssid = ""44"">Similarly  for all the LCFRS's  discussed in Section 2  we can define the relationship between a structure and the sequence of substrings it spans  and the effect of the composition operations on sequences of substrings.</S><S sid =""39"" ssid = ""24"">As with HG's derivation structures are annotated; in the case of TAG's  by the trees used for adjunction and addresses of nodes of the elementary tree where adjunctions occurred.</S><S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""128"" ssid = ""13"">As in the case of the derivation trees of CFG's  nodes are labeled by a member of some finite set of symbols (perhaps only implicit in the grammar as in TAG's) used to denote derived structures.</S>",['Method_Citation']
14,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","['201', '13', '212', '25', '122']","<S sid =""201"" ssid = ""7"">It is interesting to note  however  that the ability to produce a bounded number of dependent paths (where two dependent paths can share an unbounded amount of information) does not require machinery as powerful as that used in LFG  FUG and IG's.</S><S sid =""13"" ssid = ""11"">It is striking that from this point of view many formalisms can be grouped together as having identically structured derivation tree sets.</S><S sid =""212"" ssid = ""18"">Notice that even though IG's and LFG's involve CFG-like productions  they are (linguistically) fundamentally different from CFG's because the composition operations need not be linear.</S><S sid =""25"" ssid = ""10"">Not only is concatenation of these strings possible  but head wrapping can be used to split a string and wrap it around another string.</S><S sid =""122"" ssid = ""7"">These operations  as we see below  are restricted to be size preserving (as in the case of concatenation in CFG) which implies that they will be linear and non-erasing.</S>",['Method_Citation']
15,P87-1015,N10-1035,0,1987,0,"On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975) .Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings ,i.e., discontinuous phrases","On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975). Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings, i.e., discontinuous phrases","['2', '110', '9', '128', '1']","<S sid =""2"" ssid = ""2"">In considering the relationship between formalisms  we show that it is useful to abstract away from the details of the formalism  and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation  we describe a class of formalisms which we call Linear Context- Free Rewriting Systems  and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid =""110"" ssid = ""16"">The independence of paths in the tree sets of the k tI grammatical formalism in this hierarchy can be shown by means of tree pumping lemma of the form t1ti3t .</S><S sid =""9"" ssid = ""7"">We examine both the complexity of the paths of trees in the tree sets  and the kinds of dependencies that the formalisms can impose between paths.</S><S sid =""128"" ssid = ""13"">As in the case of the derivation trees of CFG's  nodes are labeled by a member of some finite set of symbols (perhaps only implicit in the grammar as in TAG's) used to denote derived structures.</S><S sid =""1"" ssid = ""1"">We consider the structural descriptions produced by various grammatical formalisms in terms of the complexity of the paths and the relationship between paths in the sets of structural descriptions that each system can generate.</S>",['Implication_Citation']
16,P87-1015,P12-1053,0,1987,0,"CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991) .3 Thus, CFTG are mildly context-sensitive since their generated string languages are semi-linear and can be parsed in polynomial time (Go ?mez-Rodr? ?guez et al, 2010)","CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991)","['136', '9', '140', '173', '128']","<S sid =""136"" ssid = ""21"">These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &quot;size&quot; is the sum of its constituents plus some constant For example  the operation 4  discussed in the case of CFG's (in Section 4.1) adds the constant equal to the sum of the length of the strings VI  un+r• Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.</S><S sid =""9"" ssid = ""7"">We examine both the complexity of the paths of trees in the tree sets  and the kinds of dependencies that the formalisms can impose between paths.</S><S sid =""140"" ssid = ""25"">Roughly speaking  a language  L  has the property of semilinearity if the number of occurrences of each symbol in any string is a linear combination of the occurrences of these symbols in some fixed finite set of strings.</S><S sid =""173"" ssid = ""58"">A configuration of M consists of a state of the finite control  the nonblank contents of the input tape and k work tapes  and the position of each head.</S><S sid =""128"" ssid = ""13"">As in the case of the derivation trees of CFG's  nodes are labeled by a member of some finite set of symbols (perhaps only implicit in the grammar as in TAG's) used to denote derived structures.</S>",['Method_Citation']
