Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P87-1015,P01-1018,0,1987,0,"The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","['191', '206', '186', '104', '192']","<S sid =""191"" ssid = ""76"">In addition to the tapes required to store the indices  M requires one work tape for splitting the substrings.</S><S sid =""206"" ssid = ""12"">As suggested in Section 4.3.2  a derivation with independent paths can be divided into subcomputations with limited sharing of information.</S><S sid =""186"" ssid = ""71"">To do this  the x's and y's are stored in the next 2ni + 2n2 tapes  and M goes to a universal state.</S><S sid =""104"" ssid = ""10"">Pumping t2 will change only one branch and leave the other branch unaffected.</S><S sid =""192"" ssid = ""77"">Thus  the ATM has no more than 6km&quot; + 1 work tapes  where km&quot; is the maximum number of substrings spanned by a derived structure.</S>",['Implication_Citation']
2,P87-1015,E09-1055,0,"Vijay-Shanker et al, 1987",0,"Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","['84', '54', '101', '59', '71']","<S sid =""84"" ssid = ""69"">((fii  Q2  Pa)   —■ (01  i32  03)   e) (02 e) Oa  en) The path complexity of the tee set generated by a MCTAG is not necessarily context-free.</S><S sid =""54"" ssid = ""39"">An IG can be viewed as a CFG in which each nonterminal is associated with a stack.</S><S sid =""101"" ssid = ""7"">The string pumping lemma for CFG's (uvwxy-theorem) can be seen as a corollary of this lemma. from this pumping lemma: a single path can be pumped independently.</S><S sid =""59"" ssid = ""44"">Bresnan  Kaplan  Peters  and Zaenen (1982) argue that these structures are needed to describe crossed-serial dependencies in Dutch subordinate clauses.</S><S sid =""71"" ssid = ""56"">0n0'i'i0'2&quot;bin242bn I n = 711 + n2 } On the other hand  no linguistic use is made of this general form of composition and Steedman (personal communication) and Steedman (1986) argues that a more limited definition of composition is more natural.</S>",['Implication_Citation']
3,P87-1015,W07-2214,0,"Vijay-Shanker et al, 1987",0,"There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","['151', '44', '136', '28', '153']","<S sid =""151"" ssid = ""36"">We now turn our attention to the recognition of string languages generated by these formalisms (LCFRL's).</S><S sid =""44"" ssid = ""29"">The edge from the root to the subtree for the derivation of 7i is labeled by the address ni.</S><S sid =""136"" ssid = ""21"">These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &quot;size&quot; is the sum of its constituents plus some constant For example  the operation 4  discussed in the case of CFG's (in Section 4.1) adds the constant equal to the sum of the length of the strings VI  un+r• Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.</S><S sid =""28"" ssid = ""13"">A TAG consists of a finite set of elementary trees that are either initial trees or auxiliary trees.</S><S sid =""153"" ssid = ""38"">In this section for the purposes of showing that polynomial time recognition is possible  we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.</S>",['Results_Citation']
4,P87-1015,P09-2003,0,nan,0,"They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","['59', '134', '153', '112', '20']","<S sid =""59"" ssid = ""44"">Bresnan  Kaplan  Peters  and Zaenen (1982) argue that these structures are needed to describe crossed-serial dependencies in Dutch subordinate clauses.</S><S sid =""134"" ssid = ""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S><S sid =""153"" ssid = ""38"">In this section for the purposes of showing that polynomial time recognition is possible  we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.</S><S sid =""112"" ssid = ""18"">.t The path set of tree sets at level k +1 have the complexity of the string language of level k. The independence of paths in a tree set appears to be an important property.</S><S sid =""20"" ssid = ""5"">As a result  CFG's can not provide the structural descriptions in which there are nested dependencies between symbols labelling a path.</S>",['Method_Citation']
5,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","['106', '54', '143', '101', '182']","<S sid =""106"" ssid = ""12"">We can give a tree pumping lemma for TAG's by adapting the uvwxy-theorem for CFL's since the tree sets of TAG's have independent and context-free paths.</S><S sid =""54"" ssid = ""39"">An IG can be viewed as a CFG in which each nonterminal is associated with a stack.</S><S sid =""143"" ssid = ""28"">The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.</S><S sid =""101"" ssid = ""7"">The string pumping lemma for CFG's (uvwxy-theorem) can be seen as a corollary of this lemma. from this pumping lemma: a single path can be pumped independently.</S><S sid =""182"" ssid = ""67"">Since each zi is a contiguous substring of the input (say ai )  and no two substrings overlap  we can represent zi by the pair of integers (i2  i2).</S>",['Method_Citation']
6,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","['55', '117', '200', '59', '106']","<S sid =""55"" ssid = ""40"">Each production can push or pop symbols on the stack as can be seen in the following productions that generate tree of the form shown in Figure 4b.</S><S sid =""117"" ssid = ""2"">Our goal is to define a class of formal systems  and show that any member of this class will possess certain attractive properties.</S><S sid =""200"" ssid = ""6"">The importance of this property becomes clear in contrasting theories underlying GPSG (Gazdar  Klein  Pulluna  and Sag  1985)  and GB (as described by Berwick  1984) with those underlying LFG and FUG.</S><S sid =""59"" ssid = ""44"">Bresnan  Kaplan  Peters  and Zaenen (1982) argue that these structures are needed to describe crossed-serial dependencies in Dutch subordinate clauses.</S><S sid =""106"" ssid = ""12"">We can give a tree pumping lemma for TAG's by adapting the uvwxy-theorem for CFL's since the tree sets of TAG's have independent and context-free paths.</S>",['Method_Citation']
7,P87-1015,P07-1021,0,"Vijay-Shanker et al, 1987",0,"We write REGD.k/ to refer to the class of regular dependency languages with a gap-degree bounded by k. Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","['32', '121', '19', '151', '138']","<S sid =""32"" ssid = ""17"">When 7' is adjoined at ?I in the tree 7 we obtain a tree v&quot;.</S><S sid =""121"" ssid = ""6"">First  any grammar must involve a finite number of elementary structures  composed using a finite number of composition operations.</S><S sid =""19"" ssid = ""4"">It can be easily shown from Thatcher's result that the path set of every local set is a regular set.</S><S sid =""151"" ssid = ""36"">We now turn our attention to the recognition of string languages generated by these formalisms (LCFRL's).</S><S sid =""138"" ssid = ""23"">We can show that languages generated by LCFRS's are semilinear as long as the composition operation does not remove any terminal symbols from its arguments.</S>",['Method_Citation']
8,P87-1015,N09-1061,0,"Vijay-Shanker et al, 1987",0,"This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006) .In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006). In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","['188', '118', '89', '96', '227']","<S sid =""188"" ssid = ""73"">Thus  for example  one successor process will be have M to be in the existential state qa with the indices encoding xi     xn  in the first 2n i tapes.</S><S sid =""118"" ssid = ""3"">In the remainder of the paper  we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid =""89"" ssid = ""74"">Hence  trees shown in Figure 8 can not be generated by any MCTAG (but can be generated by an IG) because the number of pairs of dependent paths grows with n. Since the derivation tees of TAG's  MCTAG's  and HG's are local sets  the choice of the structure used at each point in a derivation in these systems does not depend on the context at that point within the derivation.</S><S sid =""96"" ssid = ""2"">A tree set may be said to have dependencies between paths if some &quot;appropriate&quot; subset can be shown to have dependent paths as defined above.</S><S sid =""227"" ssid = ""33"">Formalisms such as the restricted indexed grammars (Gazdar  1985) and members of the hierarchy of grammatical systems given by Weir (1987) have independent paths  but more complex path sets.</S>",['Method_Citation']
9,P87-1015,N09-1061,0,1987,0,"We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","['84', '98', '12', '179', '185']","<S sid =""84"" ssid = ""69"">((fii  Q2  Pa)   —■ (01  i32  03)   e) (02 e) Oa  en) The path complexity of the tee set generated by a MCTAG is not necessarily context-free.</S><S sid =""98"" ssid = ""4"">Thatcher (1973) describes a tee pumping lemma for recognizable sets related to the string pumping lemma for regular sets.</S><S sid =""12"" ssid = ""10"">We are very grateful to Tony Kroc.h  Michael Pails  Sunil Shende  and Mark Steedman for valuable discussions. formalisms.</S><S sid =""179"" ssid = ""64"">It can be seen that M performs a top-down recognition of the input al ... nin logspace.</S><S sid =""185"" ssid = ""70"">Each spawned process must check if xi     xn  and   yn  can be derived from B and C  respectively.</S>",['Method_Citation']
10,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"LCFRS (Vijay-Shanker et al, 1987) are anatural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","LCFRS (Vijay-Shanker et al, 1987) are a natural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","['207', '153', '26', '178', '155']","<S sid =""207"" ssid = ""13"">We outlined the definition of a family of constrained grammatical formalisms  called Linear Context-Free Rewriting Systems.</S><S sid =""153"" ssid = ""38"">In this section for the purposes of showing that polynomial time recognition is possible  we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.</S><S sid =""26"" ssid = ""11"">The productions of HG's are very similar to those of CFG's except that the operation used must be made explicit.</S><S sid =""178"" ssid = ""63"">We define an ATM  M  recognizing a language generated by a grammar  G  having the properties discussed in Section 43.</S><S sid =""155"" ssid = ""40"">CFG's  TAG's  MCTAG's and HG's are all members of this class since they satisfy these restrictions.</S>",['Implication_Citation']
11,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S )wherea) N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S ) where N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","['38', '153', '165', '62', '143']","<S sid =""38"" ssid = ""23"">Thus  the derivation trees for TAG's have the same structure as local sets.</S><S sid =""153"" ssid = ""38"">In this section for the purposes of showing that polynomial time recognition is possible  we make the additional restriction that the contribution of a derived structure to the input string can be specified by a bounded sequence of substrings of the input.</S><S sid =""165"" ssid = ""50"">This class of formalisms have the properties that their derivation trees are local sets  and manipulate objects  using a finite number of composition operations that use a finite number of symbols.</S><S sid =""62"" ssid = ""47"">TAG's can be shown to be equivalent to this restricted system.</S><S sid =""143"" ssid = ""28"">The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.</S>",['Method_Citation']
12,P87-1015,E09-1053,0,1987,0,"In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","['143', '132', '101', '96', '94']","<S sid =""143"" ssid = ""28"">The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.</S><S sid =""132"" ssid = ""17"">In TAG's the elementary tree and addresses where adjunction takes place are used to instantiate the operation.</S><S sid =""101"" ssid = ""7"">The string pumping lemma for CFG's (uvwxy-theorem) can be seen as a corollary of this lemma. from this pumping lemma: a single path can be pumped independently.</S><S sid =""96"" ssid = ""2"">A tree set may be said to have dependencies between paths if some &quot;appropriate&quot; subset can be shown to have dependent paths as defined above.</S><S sid =""94"" ssid = ""79"">The semilinearity of Tree Adjoining Languages (TAL's)  MCTAL's  and Head Languages (HL's) can be proved using this property  with suitable restrictions on the composition operations.</S>",['Method_Citation']
13,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"2 By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of deriva tional structures are all regular (Vijay-Shanker et al., 1987)","By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of derivational structures are all regular (Vijay-Shanker et al., 1987)","['89', '164', '17', '143', '26']","<S sid =""89"" ssid = ""74"">Hence  trees shown in Figure 8 can not be generated by any MCTAG (but can be generated by an IG) because the number of pairs of dependent paths grows with n. Since the derivation tees of TAG's  MCTAG's  and HG's are local sets  the choice of the structure used at each point in a derivation in these systems does not depend on the context at that point within the derivation.</S><S sid =""164"" ssid = ""49"">Although embedding this version of LCFRS's in the framework of ILFP developed by Rounds (1985) is straightforward  our motivation was to capture properties shared by a family of grammatical systems and generalize them defining a class of related formalisms.</S><S sid =""17"" ssid = ""2"">We define the path set of a tree 1 as the set of strings that label a path from the root to frontier of 7.</S><S sid =""143"" ssid = ""28"">The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.</S><S sid =""26"" ssid = ""11"">The productions of HG's are very similar to those of CFG's except that the operation used must be made explicit.</S>",['Method_Citation']
14,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","['6', '91', '68', '143', '189']","<S sid =""6"" ssid = ""4"">For example  Gazdar (1985) discusses the applicability of Indexed Grammars (IG's) to Natural Language in terms of the structural descriptions assigned; and Berwick (1984) discusses the strong generative capacity of Lexical-Functional Grammar (LFG) and Government and Bindings grammars (GB).</S><S sid =""91"" ssid = ""76"">We characterize a class of formalisms that have this property in Section 4.</S><S sid =""68"" ssid = ""53"">This kind of dependency arises from the use of the composition operation to compose two arbitrarily large categories.</S><S sid =""143"" ssid = ""28"">The property of semilinearity is concerned only with the occurrence of symbols in strings and not their order.</S><S sid =""189"" ssid = ""74"">For rules p : A fpo such that fp is constant function  giving an elementary structure  fp is defined such that fp() = (Si ... xi() where each z is a constant string.</S>",['Results_Citation']
15,P87-1015,N10-1035,0,1987,0,"On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975) .Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings ,i.e., discontinuous phrases","On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975). Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings, i.e., discontinuous phrases","['151', '90', '185', '141', '158']","<S sid =""151"" ssid = ""36"">We now turn our attention to the recognition of string languages generated by these formalisms (LCFRL's).</S><S sid =""90"" ssid = ""75"">Thus  as in CFG's  at any point in the derivation  the set of structures that can be applied is determined only by a finite set of rules encapsulated by the grammar.</S><S sid =""185"" ssid = ""70"">Each spawned process must check if xi     xn  and   yn  can be derived from B and C  respectively.</S><S sid =""141"" ssid = ""26"">Thus  the length of any string in L is a linear combination of the length of strings in some fixed finite subset of L  and thus L is said to have the constant growth property.</S><S sid =""158"" ssid = ""43"">We can represent any derived tree of a TAG by the two substrings that appear in its frontier  and then define how the adjunction operation concatenates the substrings.</S>",['Implication_Citation']
16,P87-1015,P12-1053,0,1987,0,"CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991) .3 Thus, CFTG are mildly context-sensitive since their generated string languages are semi-linear and can be parsed in polynomial time (Go ?mez-Rodr? ?guez et al, 2010)","CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991)","['156', '106', '32', '12', '55']","<S sid =""156"" ssid = ""41"">Giving a recognition algorithm for LCFRL's involves describing the substrings of the input that are spanned by the structures derived by the LCFRS's and how the composition operation combines these substrings.</S><S sid =""106"" ssid = ""12"">We can give a tree pumping lemma for TAG's by adapting the uvwxy-theorem for CFL's since the tree sets of TAG's have independent and context-free paths.</S><S sid =""32"" ssid = ""17"">When 7' is adjoined at ?I in the tree 7 we obtain a tree v&quot;.</S><S sid =""12"" ssid = ""10"">We are very grateful to Tony Kroc.h  Michael Pails  Sunil Shende  and Mark Steedman for valuable discussions. formalisms.</S><S sid =""55"" ssid = ""40"">Each production can push or pop symbols on the stack as can be seen in the following productions that generate tree of the form shown in Figure 4b.</S>",['Method_Citation']
