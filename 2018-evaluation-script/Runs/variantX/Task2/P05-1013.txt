In the second scheme  Head+Path  we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is p↓.In the third and final scheme  denoted Path  we keep the extra infor2Note that this is a baseline for the parsing experiment only (Experiment 2).Here we use a slightly different notion of lift  applying to individual arcs and moving their head upwards one step at a time: Intuitively  lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph)  unless wj is a root in which case the operation is undefined (but then wj —* wk is necessarily projective if the dependency graph is well-formed).It is worth noting that  although nonprojective constructions are less frequent in DDT than in PDT  they seem to be more deeply nested  since only about 80% can be projectivized with a single lift  while almost 95% of the non-projective arcs in PDT only require a single lift.The Prague Dependency Treebank (PDT) consists of more than 1M words of newspaper text  annotated on three levels  the morphological  analytical and tectogrammatical levels (Hajiˇc  1998).Projectivizing a dependency graph by lifting nonprojective arcs is a nondeterministic operation in the general case.The entire treebank is used in the experiment  but only primary dependencies are considered.4 In all experiments  punctuation tokens are included in the data but omitted in evaluation scores.In the following  we use the notation wi wj to mean that (wi  r  wj) E A; r we also use wi wj to denote an arc with unspecified label and wi —*∗ wj for the reflexive and transitive closure of the (unlabeled) arc relation.Except for the left3The graphs satisfy all the well-formedness conditions given in section 2 except (possibly) connectedness.By applying an inverse transformation to the output of the parser  arcs with non-standard labels can be lowered to their proper place in the dependency graph  giving rise 1The dependency graph has been modified to make the final period a dependent of the main verb instead of being a dependent of a special root node for the sentence. to non-projective structures.The main result is that the combined system can recover non-projective dependencies with a precision sufficient to give a significant improvement in overall parsing accuracy  especially with respect to the exact match criterion  leading to the best reported performance for robust non-projective parsing of Czech.The rest of the paper is structured as follows.This is in contrast to dependency treebanks  e.g.We call this pseudoprojective dependency parsing  since it is based on a notion of pseudo-projectivity (Kahane et al.  1998).The second main result is that the pseudo-projective approach to parsing (using special arc labels to guide an inverse transformation) gives a further improvement of about one percentage point on attachment score.The Danish Dependency Treebank (DDT) comprises about 100K words of text selected from the Danish PAROLE corpus  with annotation of primary and secondary dependencies (Kromann  2003).Unlike Kahane et al. (1998)  we do not regard a projectivized representation as the final target of the parsing process.More details on the parsing algorithm can be found in Nivre (2003).While the proportion of sentences containing non-projective dependencies is often 15–25%  the total proportion of non-projective arcs is normally only 1–2%.In addition  there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington  1990; Kahane et al.  1998; Duchier and Debusmann  2001; Holan et al.  2001; Hellwig  2003).On the other hand  given that all schemes have similar parsing accuracy overall  this means that the Path scheme is the least likely to introduce errors on projective arcs.Using the terminology of Kahane et al. (1998)  we say that jedna is the syntactic head of Z  while je is its linear head in the projectivized representation.As can be seen from the last column in Table 1  both Head and Head+Path may theoretically lead to a quadratic increase in the number of distinct arc labels (Head+Path being worse than Head only by a constant factor)  while the increase is only linear in the case of Path.The overall parsing accuracy obtained with the pseudo-projective approach is still lower than for the best projective parsers.Compared to related work on the recovery of long-distance dependencies in constituency-based parsing  our approach is similar to that of Dienes and Dubey (2003) in that the processing of non-local dependencies is partly integrated in the parsing process  via an extension of the set of syntactic categories  whereas most other approaches rely on postprocessing only.The choice between different actions is in general nondeterministic  and the parser relies on a memorybased classifier  trained on treebank data  to predict the next action based on features of the current parser configuration.However  the overall percentage of non-projective arcs is less than 2% in PDT and less than 1% in DDT.Prague Dependency Treebank (Hajiˇc et al.  2001b)  Danish Dependency Treebank (Kromann  2003)  and the METU Treebank of Turkish (Oflazer et al.  2003)  which generally allow annotations with nonprojective dependency structures.The increase is generally higher for PDT than for DDT  which indicates a greater diversity in non-projective constructions.It is sometimes claimed that one of the advantages of dependency grammar over approaches based on constituency is that it allows a more adequate treatment of languages with variable word order  where discontinuous syntactic constructions are more common than in languages like English (Mel’ˇcuk  1988; Covington  1990).For robustness reasons  the parser may output a set of dependency trees instead of a single tree. most dependent of the next input token  dependency type features are limited to tokens on the stack.The last four columns in Table 3 show the distribution of nonprojective arcs with respect to the number of lifts required.As expected  the most informative encoding  Head+Path  gives the highest accuracy with over 99% of all non-projective arcs being recovered correctly in both data sets.In the second part of the experiment  we applied the inverse transformation based on breadth-first search under the three different encoding schemes.The results are given in Table 4.If (wi  r  wj) E A  we say that wi is the head of wj and wj a dependent of wi.In section 4 we evaluate these transformations with respect to projectivized dependency treebanks  and in section 5 they are applied to parser output.Instead  we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.First  the training data for the parser is projectivized by applying a minimal number of lifting operations (Kahane et al.  1998) and encoding information about these lifts in arc labels.In section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs  and in section 3 we describe the data-driven dependency parser that is the core of our system.Before we turn to the evaluation  however  we need to introduce the data-driven dependency parser used in the latter experiments.The parser builds dependency graphs by traversing the input from left to right  using a stack to store tokens that are not yet complete with respect to their dependents.In approaching this problem  a variety of different methods are conceivable  including a more or less sophisticated use of machine learning.More details on the memory-based prediction can be found in Nivre et al. (2004) and Nivre and Scholz (2004).However  the accuracy is considerably higher than previously reported results for robust non-projective parsing of Czech  with a best performance of 73% UAS (Holan  2004).However  if we consider precision  recall and Fmeasure on non-projective dependencies only  as shown in Table 6  some differences begin to emerge.Evaluation metrics used are Attachment Score (AS)  i.e. the proportion of tokens that are attached to the correct head  and Exact Match (EM)  i.e. the proportion of sentences for which the dependency graph exactly matches the gold standard.Table 2 shows the features used in the current version of the parser.