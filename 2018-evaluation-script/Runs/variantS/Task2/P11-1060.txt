Compositional question answering begins by mapping questions to logical forms  but training a semantic parser to perform this mapping typically requires the costly annotation of the target logical forms.Rather than using lexical triggers  several of the other systems use IBM word alignment models to produce an initial word-predicate mapping.Unlike standard semantic parsing  our end goal is only to generate the correct y  so we are free to choose the representation for z.Answering these types of complex questions compositionally involves first mapping the questions into logical forms (semantic parsing).In this paper  we learn to map questions to answers via latent logical forms  which are induced automatically from question-answer pairs.In tackling this challenging learning problem  we introduce a new semantic representation which highlights a parallel between dependency syntax and efficient evaluation of logical forms.In each dataset  each sentence x is annotated with a Prolog logical form  which we use only to evaluate and get an answer y.Model We now present our discriminative semantic parsing model  which places a log-linear distribution over z ∈ ZL(x) given an utterance x.Think of DCS as a higher-level Our system learns lexical associations between programming language tailored to natural language  words and predicates.In addition  trees enable efficient computation  thereby establishing a new connection between dependency syntax and efficient semantic evaluation.It is impossible to represent the semantics of this phrase with just a CSP  so we introduce a new aggregate relation  notated E. Consider a tree hE:ci  whose root is connected to a child c via E. If the denotation of c is a set of values s  the parent’s denotation is then a singleton set containing s. Formally: Figure 3(a) shows the DCS tree for our running example.On two stansemantic parsing benchmarks our system obtains the highest published accuracies  despite requiring no annotated logical forms.Our system outperforms all existing systems despite using no annotated logical forms.In fact  DCS performs comparably to even the version of SEMRESP trained using logical forms.All other systems require logical forms as training data  whereas ours does not.SEMRESP requires a lexicon of 1.42 words per non-value predicate  WordNet features  and syntactic parse trees; DCS requires only words for the domain-independent predicates (overall  around 0.5 words per non-value predicate)  POS tags  and very simple indicator features.What is the total population of the ten largest capitals in the US?The denotation of the middle node is {s}  where s is all major cities.The feature vector φ(x  z) is defined by sums of five simple indicator feature templates: (F1) a word triggers a predicate (e.g.  [city  city]); (F2) a word is under a relation (e.g.  [that  11]); (F3) a word is under a trace predicate (e.g.  [in  loc]); (F4) two predicates are linked via a relation in the left or right direction (e.g.  [city 11  loc  RIGHT]); and (F5) a predicate has a child relation (e.g.  [city  11]).Now d contains the consistent joint assignments to the active nodes (which include the root and all marked nodes)  as well as information stored about each marked node.For example  consider the phrase number of major cities  and suppose that number corresponds to the count predicate.The combination rules are encoded in the tems  despite using no annotated logical forms.We now present the full version of DCS which handles this type of divergence between syntactic and semantic scope.These rules are often too stringent  cused on aligning text to a world (Liang et al.  2009)  and for complex utterances  especially in free word- using text in reinforcement learning (Branavan et al.  order languages  either disharmonic combinators are 2009; Branavan et al.  2010)  and many others.Supervised semantic parsers (Zelle and Mooney  1996; Tang and Mooney  2001; Ge and Mooney  2005; Zettlemoyer and Collins  2005; Kate and Mooney  2007; Zettlemoyer and Collins  2007; Wong and Mooney  2007; Kwiatkowski et al.  2010) rely on manual annotation of logical forms  which is expensive.On the other hand  existing unsupervised semantic parsers (Poon and Domingos  2009) do not handle deeper linguistic phenomena such as quantification  negation  and superlatives.Our employed (Zettlemoyer and Collins  2007) or words work pushes the grounded language agenda towards are given multiple lexical entries (Kwiatkowski et deeper representations of language—think grounded al.  2010). compositional semantics.We used the same training-test splits as Zettlemoyer and Collins (2005) (600+280 for GEO and 500+140 for JOBS).CCG (Steedman  2000)  in which semantic pars- The integration of natural language with denotaing is driven from the lexicon.Next  we compared our systems (DCS and DCS+) with the state-of-the-art semantic parsers on the full dataset for both GEO and JOBS (see Table 3).As in Clarke et al. (2010)  we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers.CCG is one instantiation (Steedman  2000)  which is used by many semantic parsers  e.g.  Zettlemoyer and Collins (2005).We then introduce the full version (Section 2.2)  which handles linguistic phenomena such as quantification  where syntactic and semantic scope diverge.At the same time  representations such as FunQL (Kate et al.  2005)  which was used in Clarke et al. (2010)  are simpler but lack the full expressive power of lambda calculus.However  we still model the logical form (now as a latent variable) to capture the complexities of language.The basic version of DCS restricts R to join and aggregate relations (see Table 1).Figure 1 shows our probabilistic model: with respect to a world w (database of facts)  producing an answer y.This evaluation is done with respect to a world w. Recall that a world w maps each predicate p ∈ P to a set of tuples w(p).Conceptually  a world is a relational database where each predicate is a relation (possibly infinite).Let us start by considering a DCS tree z with only join relations.Let P be a set of predicates (e.g.  state  count ∈ P)  which are just symbols.We represent logical forms z as labeled trees  induced automatically from (x  y) pairs.The logical forms in DCS are called DCS trees  where nodes are labeled with predicates  and edges are labeled with relations.Define a special predicate ø with w(ø) = V. We represent functions by a set of inputoutput pairs  e.g.  w(count) = {(S  n) : n = |S|}.Extraction allows us to return the set of consistent values of a marked non-root node.We want to induce latent logical forms z (and parameters 0) given only question-answer pairs (x  y)  which is much cheaper to obtain than (x  z) pairs.To define the features  we technically need to augment each tree z ∈ ZL(x) with alignment information—namely  for each predicate in z  the span in x (if any) that triggered it.However  in order to learn  we need to sum over {z ∈ ZL(x) : JzKw = y}  and unfortunately  the additional constraint JzKw = y does not factorize.The core problem that arises in this setting is program induction: finding a logical form z (over an exponentially large space of possibilities) that produces the target answer y.Computation We can compute the denotation JzKw of a DCS tree z by exploiting dynamic programming on trees (Dechter  2003).Our model is arc-factored  so we can sum over all DCS trees in ZL(x) using dynamic programming.This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure  which will facilitate parsing.The key idea that allows us to give semanticallyscoped denotations to syntactically-scoped trees is as follows: We mark a node low in the tree with a mark relation (one of E  Q  or C).This option is not available to us since we do not have annotated logical forms  so we must instead rely on lexical triggers to define the search space.Feedback from the context; for example  the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x  y)  which means (Schuler  2003) and semantic parsing (Popescu et borders looks right for the first argument and left al.  2003; Clarke et al.  2010).Which one should we use?Intuitions How is our system learning?Our first question is: given notation of the DCS tree before execution is an utterance x  what trees z ∈ Z are permissible?The dominant paradigm in compositional semantics is Montague semantics  which constructs lambda calculus forms in a bottom-up manner.It is this transparency between syntax and semantics provided by DCS which leads to a simple and streamlined compositional semantics suitable for program induction.We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS)  which captures the core idea of using trees to represent formal semantics.In DCS  we start with lexical triggers  which are 6 Conclusion more basic than CCG lexical entries.However  the logical forms there can become quite complex  and in the context of program induction  this would lead to an unwieldy search space.For JOBS  if we use the standard Jobs database  close to half the y’s are empty  which makes it uninteresting.