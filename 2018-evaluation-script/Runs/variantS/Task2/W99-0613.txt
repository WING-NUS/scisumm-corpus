This paper discusses the use of unlabeled examples for the problem of named entity classification.This paper discusses the use of unlabeled examples for the problem of named entity classification.Unlabeled examples in the named-entity classification problem can reduce the need for supervision to a handful of seed rules.We then discuss how we adapt and generalize a boosting algorithm  AdaBoost  to the problem of named entity classification.We now describe the CoBoost algorithm for the named entity problem.A large number of rules is needed for coverage of the domain  suggesting that a fairly large number of labeled examples should be required to train a classi- However  we show that the use of data can reduce the requirements for supervision to just 7 simple &quot;seed&quot; rules.At first glance  the problem seems quite complex: a large number of rules is needed to cover the domain  suggesting that a large number of labeled examples is required to train an accurate classifier.Thus the method makes the fairly strong assumption that the features can be partitioned into two types such that each type alone is sufficient for classification.With each iteration more examples are assigned labels by both classifiers  while a high level of agreement (> 94%) is maintained between them.The approach gains leverage from natural redundancy in the data: for many named-entity instances both the spelling of the name and the context in which it appears are sufficient to determine its type.Thus an explicit assumption about the redundancy of the features — that either the spelling or context alone should be sufficient to build a classifier — has been built into the algorithm.They also describe an application of cotraining to classifying web pages (the to feature sets are the words on the page  and other pages pointing to the page).Having found (spelling  context) pairs in the parsed data  a number of features are extracted.For example  the independence assumptions mean that the model fails to capture the dependence between specific and more general features (for example the fact that the feature full.-string=New_York is always seen with the features contains (New) and The baseline method tags all entities as the most frequent class type (organization). contains (York) and is never seen with a feature such as contains (Group) ).We present two algorithms.We present two algorithms.The first unsupervised algorithm we describe is based on the decision list method from (Yarowsky 95).We can now compare this algorithm to that of (Yarowsky 95).The first method uses a similar algorithm to that of (Yarowsky 95)  with modifications motivated by (Blum and Mitchell 98).Our first algorithm is similar to Yarowsky's  but with some important modifications motivated by (Blum and Mitchell 98).The second algorithm extends ideas from boosting algorithms  designed for supervised learning tasks  to the framework suggested by (Blum and Mitchell 98).It was motivated by the observation that the (Yarowsky 95) algorithm added a very large number of rules in the first few iterations.In this work we extended the AdaBoost.MH (Schapire and Singer 98) algorithm to the cotraining case.(Blum and Mitchell 98) offer a promising formulation of redundancy  also prove some results about how the use of unlabeled examples can help classification  and suggest an objective function when training with unlabeled examples.Many statistical or machine-learning approaches for natural language problems require a relatively large amount of supervision  in the form of labeled training examples.So the success of the algorithm may well be due to its success in maximizing the number of unlabeled examples on which the two decision lists agree.Recent results (e.g.  (Yarowsky 95; Brill 95; Blum and Mitchell 98)) have suggested that unlabeled data can be used quite profitably in reducing the need for supervision.The first method builds on results from (Yarowsky 95) and (Blum and Mitchell 98).(Blum and Mitchell 98) go on to give PAC results for learning in the cotraining case.(Berland and Charniak 99) describe a method for extracting parts of objects from wholes (e.g.  &quot;speedometer&quot; from &quot;car&quot;) from a large corpus using hand-crafted patterns.The task is to learn a function from an input string (proper name) to its type  which we will assume to be one of the categories Person  Organization  or Location.The weak learner for two-class problems computes a weak hypothesis h from the input space into the reals (h : 2x -4 R)  where the sign4 of h(x) is interpreted as the predicted label and the magnitude I h(x)I is the confidence in the prediction: large numbers for I h(x)I indicate high confidence in the prediction  and numbers close to zero indicate low confidence.AdaBoost finds a weighted combination of simple (weak) classifiers  where the weights are chosen to minimize a function that bounds the classification error on a set of training examples.The model was parameterized such that the joint probability of a (label  feature-set) pair P(yi  xi) is written as The model assumes that (y  x) pairs are generated by an underlying process where the label is first chosen with some prior probability P(yi); the number of features mi is then chosen with some probability P(mi); finally the features are independently generated with probabilities P(xulyi).Output of the learning algorithm: a function h:Xxy [0  1] where h(x  y) is an estimate of the conditional probability p(y1x) of seeing label y given that feature x is present.For example  a good classifier would identify Mrs. Frank as a person  Steptoe & Johnson as a company  and Honduras as a location.For example  in ..  says Mr. Cooper  a vice president of.. both a spelling feature (that the string contains Mr.) and a contextual feature (that president modifies the string) are strong indications that Mr. Cooper is of type Person.For example  take ...  says Maury Cooper  a vice president at S.&P.In addition to the named-entity string (Maury Cooper or Georgia)  a contextual predictor was also extracted.The approach uses both spelling and contextual rules.In many cases  inspection of either the spelling or context alone is sufficient to classify an example.In the namedentity problem each example is a (spelling context) pair.A spelling rule might be a simple look-up for the string (e.g.  a rule that Honduras is a location) or a rule that looks at words within a string (e.g.  a rule that any string containing Mr. is a person).A contextual rule considers words surrounding the string in the sentence in which it appears (e.g.  a rule that any proper name modified by an appositive whose head is president is a person).The following features were used: full-string=x The full string (e.g.  for Maury Cooper  full- s tring=Maury_Cooper). contains(x) If the spelling contains more than one word  this feature applies for any words that the string contains (e.g.  Maury Cooper contributes two such features  contains (Maury) and contains (Cooper) . allcapl This feature appears if the spelling is a single word which is all capitals (e.g.  IBM would contribute this feature). allcap2 This feature appears if the spelling is a single word which is all capitals or full periods  and contains at least one period.