We present KenLM  a library that implements two data structures for efficient language model queries  reducing both time and costs.We have described two data structures for language modeling that achieve substantial reductions in time and memory cost.This paper presents methods to query N-gram language models  minimizing time and space costs.There any many techniques for improving language model speed and reducing memory consumption.The PROBING data structure is a rather straightforward application of these hash tables to store Ngram language models.The structure uses linear probing hash tables and is designed for speed.Further  the probing hash table does only one random lookup per query  explaining why it is faster on large data.We implement two data structures: PROBING  designed for speed  and TRIE  optimized for memory.The compressed variant uses block compression and is rather slow as a result.Compared with the widely- SRILM  our is 2.4 times as fast while using 57% of the mem- The structure is a trie with bit-level packing  sorted records  interpolation search  and optional quantization aimed lower memory consumption. simultaneously uses less memory than the smallest lossless baseline and less CPU than the baseline.The PROBING model is 2.4 times as fast as the fastest alternative  SRILM  and uses less memory too.The TRIE model uses less memory than the smallest lossless alternative and is still faster than SRILM.These models generally outperform our memory consumption but are much slower  even when cached.In both cases  SRILM walks its trie an additional time to minimize context as mentioned in Section 4.1.Our code is thread-safe  and integrated into the Moses  cdec  and Joshua translation systems.The code is opensource  has minimal dependencies  and offers both C++ and Java interfaces for integration.In our case multi-threading is trivial because our data structures are read-only and uncached.Adam Pauls provided a pre-release comparison to BerkeleyLM and an initial Java interface.Finally  other packages implement language model estimation while we are currently dependent on them to generate an ARPA file.This paper describes the several performance techniques used and presents benchmarks against alternative implementations.We use two common techniques  hash tables and sorted arrays  describing each before the model that uses the technique.In addition to the optimizations specific to each datastructure described in Section 2  we implement several general optimizations for language modeling.Language models are widely applied in natural language processing  and applications such as machine translation make very frequent queries.Applications such as machine translation use language model probability as a feature to assist in choosing between hypotheses.Sparse lookup is a key subproblem of language model queries.Queries take the form p(wn|wn−1 1 ) where wn1 is an n-gram.In a model we built with default settings  1.2% of n + 1-grams were missing their ngram suffix.By contrast  BerkeleyLM’s hash and compressed variants will return incorrect results based on an n −1-gram.We maintain a separate array for each length n containing all n-gram entries sorted in suffix order.Unigram lookup is dense so we use an array of probability and backoff values.Backoff-smoothed models estimate this probability based on the observed entry with longest matching history wnf   returning where the probability p(wn|wn−1 f ) and backoff penalties b(wn−1 i ) are given by an already-estimated model.Minimal perfect hashing is used to find the index at which a quantized probability and possibly backoff are stored.We offer a state function s(wn1) = wn� where substring wn� is guaranteed to extend (to the right) in the same way that wn1 does for purposes of language modeling.Unigram records store probability  backoff  and an index in the bigram table.To optimize left-to-right queries  we extend state to store backoff information: where m is the minimal context from Section 4.1 and b is the backoff penalty.The problem is to store these two values for a large and sparse set of n-grams in a way that makes queries efficient.An important subproblem of language model storage is therefore sparse mapping: storing values for sparse keys using little memory then retrieving values given keys using little time.The set of n-grams appearing in a model is sparse  and we want to efficiently find their associated probabilities and backoff penalties.The cost of storing these averages  in bits  is Because there are comparatively few unigrams  we elected to store them byte-aligned and unquantized  making every query faster.This causes a problem for reverse trie implementations  including SRILM itself  because it leaves n+1-grams without an n-gram node pointing to them.Many packages perform language model queries.The trie data structure is commonly used for language modeling.Throughout this paper we compare with several packages: SRILM 1.5.12 (Stolcke  2002) is a popular toolkit based on tries used in several decoders.IRSTLM 5.60.02 (Federico et al.  2008) is a sorted trie implementation designed for lower memory consumption.MITLM 0.4 (Hsu and Glass  2008) is mostly designed for accurate model estimation  but can also compute perplexity.IRSTLM (Federico et al.  2008) is an open-source toolkit for building and querying language models.SRILM (Stolcke  2002) is widely used within academia.RandLM 0.2 (Talbot and Osborne  2007) stores large-scale models in less memory using randomized data structures.Raj and Whittaker (2003) show that integers in a trie implementation can be compressed substantially.BerkeleyLM revision 152 (Pauls and Klein  2011) implements tries based on hash tables and sorted arrays in Java with lossy quantization.This differs from other implementations (Stolcke  2002; Pauls and Klein  2011) that use hash tables as nodes in a trie  as explained in the next section.Sheffield Guthrie and Hepple (2010) explore several randomized compression techniques  but did not release code.TPT Germann et al. (2009) describe tries with better locality properties  but did not release code.Another option is the closedsource data structures from Sheffield (Guthrie and Hepple  2010).Later  BerkeleyLM (Pauls and Klein  2011) described ideas similar to ours.Memory usage is likely much lower than ours. fThe original paper (Germann et al.  2009) provided only 2s of query timing and compared with SRI when it exceeded available RAM.These packages are further described in Section 3.Section 4.1 explained that state s is stored by applications with partial hypotheses to determine when they can be recombined.We substantially outperform all of them on query speed and offer lower memory consumption than lossless alternatives.