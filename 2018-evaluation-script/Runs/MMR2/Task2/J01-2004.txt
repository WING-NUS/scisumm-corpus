The parser performs two basic operations: (i) shifting which involves pushing the POS label of the next word onto the stack and moving the pointer to the following word in the input string; and (ii) reducing which takes the top k stack entries and replaces them with a single new entry the nonterminal label of which is the left-hand side of a rule in the grammar that has the k top stack entry labels on the right-hand side
If the left-hand side of the production is a POS then the algorithm takes the right branch of the decision tree and returns (at level 4) the POS of the closest c-commanding lexical head to A which it finds by walking the parse tree; if the left-hand side of the rule is not a POS then the algorithm returns (at level 4) the closest sibling to the left of the parent of constituent (A)
If the left-hand side of the rule is a POS and there is no sibling to the left of constituent (A) in the derivation then the algorithm takes the right branch of the decision tree to decide what value to return; otherwise the left branch
The SLM is like a trigram except that the conditioning words are taken from the tops of the stacks of candidate parses in the beam rather than from the linear order of the string
This is not surprising since our conditioning information is in many ways orthogonal to that of the trigram insofar as it includes the probability mass of the derivations; in contrast their model in some instances is very close to the trigram by conditioning on two words in the prefix string which may happen to be the two adjacent words
