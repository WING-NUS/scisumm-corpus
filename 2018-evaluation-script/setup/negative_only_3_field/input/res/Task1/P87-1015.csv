Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P87-1015,P01-1018,0,1987,0,"The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","'92','4','117','207'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""4"" ssid=""2"">Little attention, however, has been paid to the structural descriptions that these formalisms can assign to strings, i.e. their strong generative capacity.</S><S sid=""117"" ssid=""2"">Our goal is to define a class of formal systems, and show that any member of this class will possess certain attractive properties.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S>",
2,P87-1015,E09-1055,0,"Vijay-Shanker et al, 1987",0,"Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","'221','222','119','230'","<S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S><S sid=""222"" ssid=""28"">However, in order to capture the properties of various grammatical systems under consideration, our notation is more restrictive that ILFP, which was designed as a general logical notation to characterize the complete class of languages that are recognizable in polynomial time.</S><S sid=""119"" ssid=""4"">In defining LCFRS's, we hope to generalize the definition of CFG's to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""230"" ssid=""36"">LCFRS's have only been loosely defined in this paper; we have yet to provide a complete set of formal properties associated with members of this class.</S>",
3,P87-1015,W07-2214,0,"Vijay-Shanker et al, 1987",0,"There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","'62','214','4','34'","<S sid=""62"" ssid=""47"">TAG's can be shown to be equivalent to this restricted system.</S><S sid=""214"" ssid=""20"">LCFRS's share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S><S sid=""4"" ssid=""2"">Little attention, however, has been paid to the structural descriptions that these formalisms can assign to strings, i.e. their strong generative capacity.</S><S sid=""34"" ssid=""19"">It can be shown that the path set of the tree set generated by a TAG G is a context-free language.</S>",
4,P87-1015,P09-2003,0,,0,"They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","'92','134','207','118'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S>",
5,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","'92','207','134','74'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S><S sid=""74"" ssid=""59"">An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.</S>",
6,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","'221','119','226','207'","<S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S><S sid=""119"" ssid=""4"">In defining LCFRS's, we hope to generalize the definition of CFG's to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""226"" ssid=""32"">We would like to relax somewhat the constraint on the path complexity of formalisms in LCFRS.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S>",
7,P87-1015,P07-1021,0,"Vijay-Shanker et al, 1987",0,"We write REGD.k/ to refer to the class of regular dependency languages with a gap-degree bounded by k. Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","'92','134','207','214'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""214"" ssid=""20"">LCFRS's share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S>",
8,P87-1015,N09-1061,0,"Vijay-Shanker et al, 1987",0,"This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006) .In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006). In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","'92','207','118','2'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid=""2"" ssid=""2"">In considering the relationship between formalisms, we show that it is useful to abstract away from the details of the formalism, and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation, we describe a class of formalisms which we call Linear Context- Free Rewriting Systems, and show they are recognizable in polynomial time and generate only semilinear languages.</S>",
9,P87-1015,N09-1061,0,1987,0,"We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","'221','119','207','226'","<S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S><S sid=""119"" ssid=""4"">In defining LCFRS's, we hope to generalize the definition of CFG's to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""226"" ssid=""32"">We would like to relax somewhat the constraint on the path complexity of formalisms in LCFRS.</S>",
10,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"LCFRS (Vijay-Shanker et al, 1987) are anatural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","LCFRS (Vijay-Shanker et al, 1987) are a natural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","'74','41','54','60'","<S sid=""74"" ssid=""59"">An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.</S><S sid=""41"" ssid=""26"">If 7 is an elementary tree, the derivation tree consists of a single node labeled 7.</S><S sid=""54"" ssid=""39"">An IG can be viewed as a CFG in which each nonterminal is associated with a stack.</S><S sid=""60"" ssid=""45"">Gazdar (1985) considers a restriction of IG's in which no more than one nonterminal on the right-hand-side of a production can inherit the stack from the left-hand-side.</S>",
11,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S )wherea) N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S ) where N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","'90','162','189','130'","<S sid=""90"" ssid=""75"">Thus, as in CFG's, at any point in the derivation, the set of structures that can be applied is determined only by a finite set of rules encapsulated by the grammar.</S><S sid=""162"" ssid=""47"">Some of the operations will be constant functions, corresponding to elementary structures, and will be written as f () = zi), where each z, is a constant, the string of terminal symbols al an,,,.</S><S sid=""189"" ssid=""74"">For rules p : A fpo such that fp is constant function, giving an elementary structure, fp is defined such that fp() = (Si ... xi() where each z is a constant string.</S><S sid=""130"" ssid=""15"">Each treelet (an internal node with all its children) represents the use of a rule that is encapsulated by the grammar The grammar encapsulates (either explicitly or implicitly) a finite number of rules that can be written as follows: n &gt; 0 In the case of CFG's, for each production In the case of TAG's, a derivation step in which the derived trees RI, &#8226; &#8226; &#8226; , On are adjoined into fi at rhe addresses &#8226; &#8226; &#8226; &#8226; in. would involve the use of the following rule2.</S>",
12,P87-1015,E09-1053,0,1987,0,"In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","'214','92','207','134'","<S sid=""214"" ssid=""20"">LCFRS's share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S>",
13,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"2 By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of deriva tional structures are all regular (Vijay-Shanker et al., 1987)","By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of derivational structures are all regular (Vijay-Shanker et al., 1987)","'204','50','106','34'","<S sid=""204"" ssid=""10"">The similarities become apparent when they are studied at the level of derivation structures: derivation nee sets of CFG's, HG's, TAG's, and MCTAG's are all local sets.</S><S sid=""50"" ssid=""35"">The work of Rounds (1969) shows that the path sets of trees derived by IG's (like those of TAG's) are context-free languages.</S><S sid=""106"" ssid=""12"">We can give a tree pumping lemma for TAG's by adapting the uvwxy-theorem for CFL's since the tree sets of TAG's have independent and context-free paths.</S><S sid=""34"" ssid=""19"">It can be shown that the path set of the tree set generated by a TAG G is a context-free language.</S>",
14,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","'78','40','16','55'","<S sid=""78"" ssid=""63"">Each member of a set of trees can be adjoined into distinct nodes of trees in a single elementary tree set, i.e, derivations always involve the adjunction of a derived auxiliary tree set into an elementary tree set.</S><S sid=""40"" ssid=""25"">We can define derivation trees inductively on the length of the derivation of a tree 1.</S><S sid=""16"" ssid=""1"">From Thatcher's (1973) work, it is obvious that the complexity of the set of paths from root to frontier of trees in a local set (the tree set of a CFG) is regular'.</S><S sid=""55"" ssid=""40"">Each production can push or pop symbols on the stack as can be seen in the following productions that generate tree of the form shown in Figure 4b.</S>",
15,P87-1015,N10-1035,0,1987,0,"On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975) .Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings ,i.e., discontinuous phrases","On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975). Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings, i.e., discontinuous phrases","'74','27','24','214'","<S sid=""74"" ssid=""59"">An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.</S><S sid=""27"" ssid=""12"">Thus, the tree sets generated by HG's are similar to those of CFG's, with each node annotated by the operation (concatenation or wrapping) used to combine the headed strings derived by the daughters of Tree Adjoining Grammars, a tree rewriting formalism, was introduced by Joshi, Levy and Takahashi (1975) and Joshi (1983/85).</S><S sid=""24"" ssid=""9"">Head Grammars (HG's), introduced by Pollard (1984), is a formalism that manipulates headed strings: i.e., strings, one of whose symbols is distinguished as the head.</S><S sid=""214"" ssid=""20"">LCFRS's share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S>",
16,P87-1015,P12-1053,0,1987,0,"CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991) .3 Thus, CFTG are mildly context-sensitive since their generated string languages are semi-linear and can be parsed in polynomial time (Go ?mez-Rodr? ?guez et al, 2010)","CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991)","'134','92','207','118'","<S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG's).</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS's) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S>",
