Immediate-Head Parsing for Language Models. 
Eugene Charniak 
Brown Laboratory for Linguistic Information Processing 
Department of Computer Science 
Brown University, Box 1910, Providence RI 
ec@cs.brown.edu 


Abstract 
We present two language models based upon an “immediate-head” parser — our name for a parser that conditions all events below a constituent c upon the head of c. While allofthe most accurate statistical parsers are of the immediate-head variety, no previous grammatical language model uses this technology. The perplexity for both of these models signi.cantly improve upon the trigram model base-line as well as the best previous grammar-based language model. For the better of our two models these improvements are 24% and 14% respectively. We also suggest that improvement of the un­derlying parser should signi.cantly im­prove the model’s perplexity and that even in the near term there is a lot of po­tential for improvement in immediate-head language models. 

1 Introduction 
All of the most accurate statistical parsers [1,3, 6,7,12,14] are lexicalized in that they condition probabilities on the lexical content of the sen­tences being parsed. Furthermore, all of these 
.
This research was supported in part by NSF grant LIS SBR 9720368 and by NSF grant 00100203 IIS0085980. The author would like to thank the members of the Brown Laboratory for Linguistic Information Processing (BLLIP) and particularly Brian Roark who gave very useful tips on conducting this research. Thanks also to Fred Jelinek and Ciprian Chelba for the use of their data and for detailed com­ments on earlier drafts of this paper. 
parsers are what we will call immediate-head parsers in that all of the properties of the imme­diate descendants of a constituent c are assigned probabilities that are conditioned on the lexical head of c. For example, in Figure 1 the probability that the vp expands into vnppp is conditioned on the head of the vp, “put”, as are the choices of the sub-heads under the vp, i.e., “ball” (the head of the np) and “in” (the head of the pp). It is the ex­perience of the statistical parsing community that immediate-head parsers are the most accurate we can design. 
It is also worthy of note that many of these parsers [1,3,6,7] are generative — thatis, fora sentence s they try to .nd the parse Jde.ned by Equation 1: 
arg maxJp(JIs)= arg maxJp(J, s) (1) 
This is interesting because insofar as they com­pute p(J, s) these parsers de.ne a language-model in that they can (in principle) assign a probability to all possible sentences in the language by com­
puting the sum in Equation 2:  
p(s)=  .p(J, s)  (2)  
J  
where p(J, s) is zero if the yield of J  =  s.Lan­ 

guage models, of course, are of interest because speech-recognition systems require them. These systems determine the words that were spoken by solving Equation 3: 
arg maxsp(s IA)= arg maxsp(s)p(A Is) (3) 
where A denotes the acoustic signal. The .rst term on the right, p(s), is the language model, and is what we compute via parsing in Equation 2. 
vp/put 


put the ball in the box Figure 1: A tree showing head information 
Virtually all current speech recognition sys­tems use the so-called trigram language model in which the probability of a string is broken down into conditional probabilities on each word given the two previous words. E.g., 
.
p(w0,n)= p(wi Iwi-1, wi-2) (4) i=0,n-1 
On the other hand, in the last few years there has been interest in designing language models based upon parsing and Equation 2. We now turn to this previous research. 


2 Previous Work 
There is, of course, a very large body of litera­ture on language modeling (for an overview, see [10]) and even the literature on grammatical lan­guage models is becoming moderately large [4, 9,15,16,17]. The research presented in this pa­per is most closely related to two previous efforts, that by Chelba and Jelinek [4] (C&J) and that by Roark [15], and this review concentrates on these two papers. While these two works differ in many particulars, we stress here the ways in which they are similar, and similar in ways that differ from the approach taken in this paper. 
In both cases the grammar based language model computes the probability of the next word based upon the previous words of the sentence. More speci.cally, these grammar-based models compute a subset of all possible grammatical re­lations for the prior words, and then compute 
•
the probability of the next grammatical situ­ation, and 

•
the probability of seeing the next word given each of these grammatical situations. 


Also, when computing the probability of the next word, both models condition on the two prior heads of constituents. Thus, like a trigram model, they use information about triples of words. 
Neither of these models uses an immediate-head parser. Rather they are both what we will call strict left-to-right parsers. At each sentence position in strict left-to-right parsing one com­putes the probability of the next word given the previous words (and does not go back to mod­ify such probabilities). This is not possible in immediate-head parsing. Sometimes the imme­diate head of a constituent occurs after it (e.g, in noun-phrases, where the head is typically the rightmost noun) and thus is not available for con­ditioning by a strict left-to-right parser. 
There are two reasons why one might prefer strict left-to-right parsing for a language model (Roark [15] and Chelba, personal communica­tion). First, the search procedures for guessing the words that correspond to the acoustic signal works left to right in the string. If the language model is to offer guidance to the search procedure it must do so as well. 
The second bene.t of strict left-to-right parsing is that it is easily combined with the standard tri­gram model. In both cases at every point in the sentence we compute the probability of the next word given the prior words. Thus one can inter­polate the trigram and grammar probability esti­mates for each word to get a more robust estimate. It turns out that this is a good thing to do, as is clear from Table 1, which gives perplexity results for a trigram model of the data in column one, re­sults for the grammar-model in column two, and results for a model in which the two are interpo­Table 1: Perplexity results for two previous grammar-based language models 
Model  Trigram  Perplexity Grammar Interpolation  
C&J  167.14  158.28 148.90  
Roark  167.02  152.26 137.26  

latedincolumnthree. 
Both the were trained and tested on the same training and testing corpora, to be described in Section 4.1. As indicated in the table, the trigram model achieved a perplexity of 167 for the test­ing corpus. The grammar models did slightly bet­ter (e.g., 158.28 for the Chelba and Jelinek (C&J) parser), but it is the interpolation of the two that is clearly the winner (e.g., 137.26 for the Roark parser/trigram combination). In both papers the interpolation constants were 0.36 for the trigram estimate and 0.64 for the grammar estimate. 
While both of these reasons for strict-left-to­right parsing (search and trigram interpolation) are valid, they are not necessarily compelling. The ability to combine easily with trigram models is important only as long as trigram models can improve grammar models. A suf.ciently good grammar model would obviate the need for tri­grams. As for the search problem, we brie.y re­turn to this point at the end of the paper. Here we simply note that while search requires that a language model provide probabilities in a left to right fashion, one can easily imagine proce­dures where these probabilities are revised after new information is found (i.e., the head of the constituent). Note that already our search pro­cedure needs to revise previous most-likely-word hypotheses when the original guess makes the subsequent words very unlikely. Revising the associated language-model probabilities compli­cates the search procedure, but not unimaginably so. Thus it seems to us that it is worth .nding out whether the superior parsing performance of immediate-head parsers translates into improved language models. 

3 The Immediate-Head Parsing Model 
We have taken the immediate-head parser de­scribed in [3] as our starting point. This parsing model assigns a probability to a parse Jby a top-down process of considering each constituent c in Jand, for each c, .rst guessing the pre-terminal of c, t(c)(t for “tag”), then the lexical head of c, h(c), and then the expansion of c into further con­stituents e(c). Thus the probability of a parse is given by the equation 
.
p(J)= p(t(c) Il(c), H(c)) 
cEJ 
·p(h(c) It(c), l(c), H(c)) 
·p(e(c) Il(c), t(c), h(c), H(c)) 
where l(c) is the label of c (e.g., whether it is a noun phrase (np), verb phrase, etc.) and H(c)is the relevant history of c — information outside c that our probability model deems important in de­termining the probability in question. In [3] H(c) approximately consists of the label, head, and head-part-of-speech for the parent of c: m(c), i(c), and u(c) respectively. One exception is the distri­bution p(e(c) Il(c), t(c), h(c), H(c)), where H only 
1
includes m and u. 
Whenever it is clear to which constituent we are referring we omit the (c) in, e.g., h(c). In this notation the above equation takes the following form: 
.
p(J)= p(t Il, m, u, i) ·p(h It, l, m, u, i) 
cEJ 
·p(e Il, t, h, m, u). (5) 
Because this is a point of contrast with the parsers described in the previous section, note that all of the conditional distributions are conditioned on one lexical item (either i or h). Thus only p(h It, l, m, u, i), the distribution for the head of c, looks at two lexical items (i and h itself), and none of the distributions look at three lexical items as do the trigram distribution of Equation 4 and the previously discussed parsing language models [4, 15]. 
Next we describe how we assign a probabil­ity to the expansion e of a constituent. We break up a traditional probabilistic context-free gram­mar (PCFG) rule into a left-hand side with a label l(c) drawn from the non-terminal symbols of our grammar, and a right-hand side that is a sequence 
1We simplify slightly in this section. See [3] for all the details on the equations as well as the smoothing used. 
of one or more such symbols. For each expansion we distinguish one of the right-hand side labels as the “middle” or “head” symbol M(c). M(c)is the constituent from which the head lexical item h is obtained according to deterministic rules that pick the head of a constituent from among the heads of its children. To the left of M is a sequence of one or more left labels Li(c) including the special ter­mination symbol , which indicates that there are no more symbols to the left, and similarly for the labels to the right, Ri(c). Thus an expansion e(c) looks like: 
lLm... L1MR1... Rn . (6) 
The expansion is generated by guessing .rst M, then in order L1 through Lm+1 (= ), and similarly for R1 through Rn+1. 
In anticipation of our discussion in Section 4.2, note that when we are expanding an Li we do not know the lexical items to its left, but if we prop­erly dovetail our “guesses” we can be sure of what word, if any, appears to its right and before M,and similarly for the word to the left of Rj. This makes such words available to be conditioned upon. 
Finally, the parser of [3] deviates in two places from the strict dictates of a language model. First, as explicitly noted in [3], the parser does not com­pute the partition function (normalization con­stant) for its distributions so the numbers it re­turns are not true probabilities. We noted there that if we replaced the “max-ent inspired” fea­ture with standard deleted interpolation smooth­ing, we took a signi.cant hit in performance. We have now found several ways to overcome this problem, including some very ef.cient ways to compute partition functions for this class of mod­els. In the end, however, this was not neces­sary, as we found that we could obtain equally good performance by “hand-crafting” our inter­polation smoothing rather than using the “obvi­ous” method (which performs poorly). 
Secondly, as noted in [2], the parser encourages right branching with a “bonus” multiplicative fac­tor of 1.2 for constituents that end at the right boundary of the sentence, and a penalty of 0.8 for those that do not. This is replaced by explic­itly conditioning the events in the expansion of Equation 6 on whether or not the constituent is at the right boundary (barring sentence-.nal punctu­ation). Again, with proper attention to details, this can be known at the time the expansion is taking place. This modi.cation is much more complex than the multiplicative “hack,” and it is not quite as good (we lose about 0.1% in precision/recall .gures), but it does allow us to compute true prob­abilities. 
The resulting parser strictly speaking de.nes a PCFG in that all of the extra conditioning in­formation could be included in the non-terminal­node labels (as we did with the head information in Figure 1). When a PCFG probability distribu­tion is estimated from training data (in our case the Penn tree-bank) PCFGs de.ne a tight (sum­ming to one) probability distribution over strings [5], thus making them appropriate for language models. We also empirically checked that our in­dividual distributions (p(t Il, m, u, i), and p(h I t, l, m, u, i) from Equation 5 and p(L Il, t, h, m, u), p(M Il, t, h, m, u), and p(R Il, t, h, m, u) from Equation 5) sum to one for a large, random, se­lection of conditioning events2 
As with [3], a subset of parses is computed with a non-lexicalized PCFG, and the most probable edges (using an empirically established thresh­old) have their probabilities recomputed accord­ing to the complete probability model of Equation 
5. Both searches are conducted using dynamic programming. 

4 Experiments 
4.1 The Immediate-Bihead Language Model 
The parser as described in the previous section was trained and tested on the data used in the pre­viously described grammar-based language mod­eling research [4,15]. This data is from the Penn Wall Street Journal tree-bank [13], but modi.ed to make the text more “speech-like”. In particu­lar: 
1. 
all punctuation is removed, 

2. 
no capitalization is used, 

3. 
all symbols and digits are replaced by the symbol N, and 


2They should sum to one. We are just checking that there are no bugs in the code. 
Model  Trigram  Perplexity Grammar Interpolation  
C&J  167.14  158.28 148.90  
Roark  167.02  152.26 137.26  
Bihead  167.89  144.98 133.15  

Table 2: Perplexity results for the immediate­bihead model 
4. all words except for the 10,000 most com­mon are replaced by the symbol UNK. 
As in previous work, .les F0 to F20 are used for training, F21-F22 for development, and F23-F24 for testing. 
The results are given in Table 2. We refer to the current model as the bihead model. “Bihead” here emphasizes the already noted fact that in this model probabilities involve at most two lexical heads. As seen in Table 2, the immediate-bihead model with a perplexity of 144.98 outperforms both previous models, even though they use tri­grams of words in their probability estimates. 
We also interpolated our parsing model with the trigram model (interpolation constant .36, as with the other models) and this model outper­forms the other interpolation models. Note, how­ever, that because our parser does not de.ne prob­abilities for each word based upon previous words (as with trigram) it is not possible to do the inte­gration at the word level. Rather we interpolate the probabilities of the entire sentences. This is a much less powerful technique than the word-level interpolation used by both C&J and Roark, but we still observe a signi.cant gain in performance. 

4.2 The Immediate-Trihead Model 
While the performance of the grammatical model is good, a look at sentences for which the tri­gram model outperforms it makes its limitations apparent. The sentences in question have noun phrases like “monday night football” that trigram models eats up but on which our bihead parsing model performs less well. For example, consider the sentence “he watched monday night football”. The trigram model assigns this a probability of 
1. 9 ·10-5, while the grammar model gives it a probability of 2. 77 ·10-7. To a .rst approxima­tion, this is entirely due to the difference in prob­
np 

nbar 


monday night football 
Figure 2: A noun-phrase with sub-structure 
ability of the noun-phrase. For example, the tri­gram probability p(football Imonday, night) = 
0. 366, and would have been 1.0 except that smoothing saved some of the probability for other things it might have seen but did not. Because the grammar model conditions in a different order, the closest equivalent probability would be that for “monday”, but in our model this is only con­ditioned on “football” so the probability is much less biased, only 0. 0306. (Penn tree-bank base noun-phrases are .at, thus the head above “mon­day” is “football”.) 
This immediately suggests creating a second model that captures some of the trigram-like probabilities that the immediate-bihead model misses. The most obvious extension would be to condition upon not just one’s parent’s head, but one’s grandparent’s as well. This does capture some of the information we would like, partic­ularly the case heads of noun-phrases inside of prepositional phrases. For example, in “united states of america”, the probability of “america” is now conditioned not just on “of” (the head of its parent) but also on “states”. 
Unfortunately, for most of the cases where tri­gram really cleans up this revision would do lit­tle. Thus, in “he watched monday night football” “monday” would now be conditioned upon “foot­ball” and “watched.” The addition of “watched” is unlikely to make much difference, certainly compared to the boost trigram models get by, in effect, recognizing the complete name. 
It is interesting to note, however, that virtu­ally all linguists believe that a noun-phrase like “monday night football” has signi.cant substruc­ture — e.g., it would look something like Figure 
2. If we assume this tree-structure the two heads above “monday” are “night” and “football” re­spectively, thus giving our trihead model the same power as the trigram for this case. Ignoring some of the conditioning events, we now get a proba­bility p(h = monday Ii = night, j = football), which is much higher than the corresponding bi-head version p(h = monday Ii = football). The reader may remember that h is the head of the cur­rent constituent, while i is the head of its parent. We now de.ne j to be the grandparent head. 
We decided to adopt this structure, but to keep things simple we only changed the de.nition of “head” for the distribution p(h It, l, m, u, i, j). Thus we adopted the following revised de.nition of head for constituents of base noun-phrases: 
For a pre-terminal (e.g., noun) con­stituent c of a base noun-phrase in which it is not the standard head (h)and which has as its right-sister another pre­terminal constituent d which is not it­self h, the head of c is the head of d.The sole exceptions to this rule are phrase-initial determiners and numbers which retain h as their heads. 
In effect this de.nition assumes that the sub­structure of all base noun-phrases is left branch­ing, as in Figure 2. This is not true, but Lauer 
[11] shows that about two-thirds of all branching in base-noun-phrases is leftward. We believe we would get even better results if the parser could determine the true branching structure. 
We then adopt the following de.nition of a grandparent-head feature j. 
1. 
if c is a noun phrase under a prepositional phrase, or is a pre-terminal which takes a revised head as de.ned above, then j is the grandparent head of c,else 

2. 
if c is a pre-terminal and is not next (in the production generating c) to the head of its parent (i)then j(c) is the head of the con­stituent next to c in the production in the di­rection of the head of that production, else 

3. 
j is a “none-of-the-above” symbol. 


Case 1 now covers both “united states of amer­ica” and “monday night football” examples. Case 2 handles other .at constituents in Penn tree-bank style (e.g., quanti.er-phrases) for which we do not have a good analysis. Case three says that this feature is a no-op in all other situations. 
Model  Trigram  Perplexity Grammar Interpolation  
C&J  167.14  158.28 148.90  
Roark  167.02  152.26 137.26  
Bihead  167.89  144.98 133.15  
Trihead  167.89  130.20 126.07  

Table 3: Perplexity results for the immediate­trihead model 
The results for this model, again trained on F0­F20 and tested on F23-24, are given in Figure 3 under the heading ”Immediate-trihead model”. We see that the grammar perplexity is reduced to 130.20, a reduction of 10% over our .rst model, 14% over the previous best grammar model (152.26%), and 22% over the best of the above trigram models for the task (167.02). When we run the trigram and new grammar model in tandem we get a perplexity of 126.07, a reduction of 8% over the best previous tandem model and 24% over the best trigram model. 

4.3 Discussion 
One interesting fact about the immediate-trihead model is that of the 3761 sentences in the test cor­pus, on 2934, or about 75%, the grammar model assigns a higher probability to the sentence than does the trigram model. One might well ask what went “wrong” with the remaining 25%? Why should the grammar model ever get beaten? Three possible reasons come to mind: 
1. 
The grammar model is better but only by a small amount, and due to sparse data prob­lems occasionally the worse model will luck out and beat the better one. 

2. 
The grammar model and the trigram model capture different facts about the distribution of words in the language, and for some set of sentences one distribution will perform bet­ter than the other. 

3. 
The grammar model is, in some sense, al­ways better than the trigram model, but if the parser bungles the parse, then the grammar model is impacted very badly. Obviously the trigram model has no such Achilles’ heel. 


Sentence Group  Num.  Labeled  Labeled  
Precision  Recall  
All Sentences  3761  84.6%  83.7%  
Grammar High  2934  85.7%  84.9%  
Trigram High  827  80.1%  79.0%  

Table 4: Precision/recall for sentences in which trigram/grammar models performed best 
We ask this question because what we should do to improve performance of our grammar-based language models depends critically on which of these explanations is correct: if (1) we should col­lect more data, if (2) we should just live with the tandem grammar-trigram models, and if (3) we should create better parsers. 
Based upon a few observations on sentences from the development corpus for which the tri­gram model gave higher probabilities we hypoth­esized that reason (3), bungled parses, is primary. To test this we performed the following experi­ment. We divide the sentences from the test cor­pus into two groups, ones for which the trigram model performs better, and the ones for which the grammar model does better. We then collect labeled precision and recall statistics (the stan­dard parsing performance measures) separately for each group. If our hypothesis is correct we ex­pect the “grammar higher” group to have more ac­curate parses than the trigram-higher group as the poor parse would cause poor grammar perplexity for the sentence, which would then be worse than the trigram perplexity. If either of the other two explanations were correct one would not expect much difference between the two groups. The re­sults are shown in Table 4. We see there that, for example, sentences for which the grammar model has the superior perplexity have average recall 5.9 (= 84.9 -79. 0) percentage points higher than the sentences for which the trigram model performed better. The gap for precision is 5.6. This seems to support our hypothesis. 


5 Conclusion and Future Work 
We have presented two grammar-based language models, both of which signi.cantly improve upon both the trigram model baseline for the task (by 24% for the better of the two) and the best pre­vious grammar-based language model (by 14%). 
Furthermore we have suggested that improve­ment of the underlying parser should improve the model’s perplexity still further. 
We should note, however, that if we were deal­ing with standard Penn Tree-bank Wall-Street-Journal text, asking for better parsers would be easier said than done. While there is still some progress, it is our opinion that substantial im­provement in the state-of-the-art precision/recall .gures (around 90%) is unlikely in the near fu­ture.3 However, we are not dealing with stan­dard tree-bank text. As pointed out above, the text in question has been “speechi.ed” by re­moving punctuation and capitalization, and “sim­pli.ed” by allowing only a .xed vocabulary of 10,000 words (replacing all the rest by the sym­bol “UNK”), and replacing all digits and symbols by the symbol “N”. 
We believe that the resulting text grossly under-represents the useful grammatical information available to speech-recognition systems. First, we believe that information about rare or even truly unknown words would be useful. For example, when run on standard text, the parser uses ending information to guess parts of speech [3]. Even if we had never encountered the word “show­boating”, the “ing” ending tells us that this is almost certainly a progressive verb. It is much harder to determine this about UNK.4 Secondly, while punctuation is not to be found in speech, prosody should give us something like equiva­lent information, perhaps even better. Thus sig­ni.cantly better parser performance on speech-derived data seems possible, suggesting that high-performance trigram-less language models may be within reach. We believe that the adaptation of prosodic information to parsing use is a worthy topic for future research. 
Finally, we have noted two objections to immediate-head language models: .rst, they complicate left-to-right search (since heads are often to the right of their children) and second, 
3Furthermore, some of the newest wrinkles [8] use dis­criminative methods and thus do not de.ne language models at all, seemingly making them ineligible for the competition on a priori grounds. 
4To give the reader some taste for the dif.culties pre­sented by UNKs, we encourage you to try parsing the fol­lowing real example: “its supposedly unk unk unk a unk that makes one unk the unk of unk unk the unk radical unk of unk and unk and what in unk even seems like unk in unk”. 
they cannot be tightly integrated with trigram models. 
The possibility of trigram-less language mod­els makes the second of these objections without force. Nor do we believe the .rst to be a per­manent disability. If one is willing to provide sub-optimal probability estimates as one proceeds left-to-right and then amend them upon seeing the true head, left-to-right processing and immediate-head parsing might be joined. Note that one of the cases where this might be worrisome, early words in a base noun-phrase could be conditioned upon a head which comes several words later, has been made signi.cantly less problematic by our revised de.nition of heads inside noun-phrases. We be­lieve that other such situations can be brought into line as well, thus again taming the search prob­lem. However, this too is a topic for future re­search. 




References 
1. 
BOD,R. What is the minimal set of frag­ments that achieves maximal parse accuracy. In Proceedings of Association for Computa­tional Linguistics 2001. 2001. 

2. 
CHARNIAK,E. Tree-bank grammars.In Pro­ceedings of the Thirteenth National Con­ference on Arti.cial Intelligence. AAAI Press/MIT Press, Menlo Park, 1996, 1031– 1036. 

3. 
CHARNIAK, E. A maximum-entropy­inspired parser.In Proceedings of the 2000 Conference of the North American Chapter of the Association for Computational Linguistics . ACL, New Brunswick NJ, 2000. 

4. 
CHELBA,C. AND JELINEK,F. Exploiting syntactic structure for language modeling.In Proceedings for COLING-ACL 98.ACL, New Brunswick NJ, 1998, 225–231. 

5. 
CHI,Z. AND GEMAN, S. Estimation of probabilistic context-free grammars. Computa­tional Linguistics 24 2 (1998), 299–306. 

6. 
COLLINS,M. J. Three generative lexicalized models for statistical parsing.In Proceedings of the 35th Annual Meeting of the ACL. 1997, 16–23. 



7. 
COLLINS, M. J. Head-Driven Statistical Models for Natural Language Parsing. Univer­sity of Pennsylvania, Ph.D. Dissertation, 1999. 

8. 
COLLINS,M. J. Discriminative reranking for natural language parsing.In Proceedings of the International Conference on Machine Learning (ICML 2000). 2000. 

9. 
GODDEAU,D. Using probabilistic shift-reduce parsing in speech recognition systems. In Proceedings of the 2nd International Confer­ence on Spoken Language Processing. 1992, 321–324. 


10. 
GOODMAN,J. Putting it all together: lan­guage model combination.In ICASSP-2000. 2000. 

11. 
LAUER,M. Corpus statistics meet the noun compound: some empirical results.In Proceed­ings of the 33rd Annual Meeting of the Associ­ation for Computational Linguistics. 1995, 47– 

55. 


12. 
MAGERMAN,D. M. Statistical decision-tree models for parsing.In Proceedings of the 33rd Annual Meeting of the Association for Com­putational Linguistics. 1995, 276–283. 

13. 
MARCUS,M. P., SANTORINI,B. AND MARCINKIEWICZ, M. A. Building a large annotated corpus of English: the Penn tree-bank. Computational Linguistics 19 (1993), 313–330. 

14. 
RATNAPARKHI, A. Learning to parse natural language with maximum entropy models. Ma­chine Learning 34 1/2/3 (1999), 151–176. 

15. 
ROARK, B. Probabilistic top-down parsing and language modeling. Computational Lin­guistics (forthcoming). 

16. 
STOLCKE, A. An ef.cient probabilistic context-free parsing algorithm that computes pre.x probabilities. Computational Linguistics 21 (1995), 165–202. 

17. 
STOLCKE,A. AND SEGAL,J. Precise n-gram probabilities from stochastic context-free grammars.In Proceedings of the 32th Annual Meeting of the Association for Computational Linguistics. 1994, 74–79. 



