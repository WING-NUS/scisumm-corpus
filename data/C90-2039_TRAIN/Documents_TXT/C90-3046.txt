Japanese Sentence Analysis as Argumentation 
Akira Shimazu 
NTT Basic Research Laboratories 
3-9-11, Midori-cho, Musashino-shi, Tokyo 180, Japan 

shimazu ~ntt-20. ntt.jp@relay, cs.net 


Abstract 
This paper proposes that sentence analysis should be treated as de feasible reasoning, and presents such a treatment lbr Japanese sentence analyses using an argumentation system by Konolige, which is a for- malizat'ion of defeasible reasoning, that includes ar- guments and defeat rules that capture defeasibility. 
1 Introduction 
Sentence analyses are essentially reasoning processes which derive assumptions/expectations t?om ob-served input sentences. A syntactic structure ex-. tracted fl'om a sentence by parsing is only a pre-diction, and may be invalidated by semantic or con- textual analyses. This is because interpretation of a sentence requires the use of semantic and contextual analyses to determine its meaning, and because infor- mation expressed by an utterance is partial. Further-more, even when utterances are not grammatical, it is impractical for a parser to reject them because of their ungrammatieality. Therefore, the following two desiderata can be considered for such sentence analy- ses: to select plausible candidates from among many possible candidates and to integrate, in a uniform manner, syntactic, semantic, m~d pragmatic process- ing. 
From these viewpoints, this paper proposes that sentence analysis should be treated as defeasible rea- soning, and presents such a treatment using an ar-gumentation system [7], which is a formalization of defeasible rea~soning, that includes arguments and defeat rules that capture defe,asibility. In particu- lar, this paper discusses treatments of chart pars-ing [5], e~use analyses, and interpretation of Japanese noun phrases with adnominal particles. Since there is a continuity from syntactic analysis (parsing) to semantic and contextual analyses when viewed as reasoning processes, we use the word analysis rather than parsing. 

2 Underlying Frameworks 
2.1 Sentenee Analysis as Deduction 
Mental processes can be viewed as reasoning pro- cesses that are invoked by observations of exter- nal environments and interactions with other agents. Reasoning has been generally formalized and imple- mented as deduction frameworks. Even parsing and generation can be formalized a~s deduction [12] [15]. This treatment has several advantages, including, in particular, theoretical cleanliness, harmony with semantics and pragmatics, generalization of pars- ing, gap a.nd unbounded dependency treatments that avoid the addition of specific mechanisms. The de- ductive formalisms ['or parsing proposed by Shieber correspond to chart parsing [5]. \\"e describe deduc- tion rules for parsing [15], which satis{)' our present requirements for describing sentence analysis and de- feat rules. The basic inf0rence rules are prediction and completion. 
The inference rule of prediction is as follows. 
[a ,--- b7, i, j, a.] b ~ ,3 
[b ~ /3,j,j,_] 
The inference rule of completion is as follows. 
[a'--bT,i,j, ct] [b~,j,k,9] 
[a~- 7, i, k, al~] 

Itere, [a ,-- 3, i,j,c*] represents an edge where i is its starting position, j is its ending position, and where a is analysed, b :-, /3 represents a grammar rule. 'Ib be precise, these rules are schemata. In contr~st to these rules, grammar rules in DCG them- selves flmction as deduction rules. 

2.2 Argunmntation System 
Many types of common sense reasoning are said to be defeasible; such reasoning involves inferences that are plausible on tile basis of current information, but that rnay be invalidated by new information. Konofige defined a simple and natural system that tbrmalizes such rea~soning. This tbrmalization used arguments specified by schemata, tie showed how the Yale Shooting Problem and the plan recogni- tion problem can be treated in an intuitively sat-isfying manner by using the argumentation syst.em ARGH [7], [8]. According to [8], the ARGtI is a tbr- real system, in the sense that its elements are formal objects. It is similar in many respects to so-called justification-based 'Duth Maintenance Systems, but differs in tile diversity of argumentation allowed, and in the fact that arguments for a proposition and its negation may coexist without contradiction. For-mally, an argulnent is a relation between a set of propositions (the premises of the argument), and an- other set of propositions (the conclusion of the argu- ments). Argumentation is started with an initial sel of facts. Then, argument schemata are used to con- struct plausible arguments. The process of deciding which arguments are valid is carried out using defeat rules. Although there are other formalizations for defeasible reasoning, such as abduction [1], [3], since our main concern is to clarify inferences in sentence analysis and the relations between them, we use the argumentation system here, without consideration of the alternatives. 
3 	Sentence Analysis as Argmnentation 
Sentence analysis is comprised of reasoning pro-cesses which derive assumptions/expectations from observed input sentences. From such a viewpoint, sentence analysis is reatly abduction rather than de- duction: 
Baekground +Assum, ption t- sentence 

Therefore, various decisions pertaining to the as-sumption expectations are carried out in the sen-tence analysis processes. These decisions may be invalidated later in the processes as the analysis be- comes further elaborated. The ba~sic decisions are performed, when syntactic structures and semantic structures (logical forms) are extracted along with their contextual analyses. The important point here is that we can view these analysis processes as deci- sions in a defeasible reasoning process; in this paper, we model this point with an a.rgumeutation process. Basic arguments in analysis and related defeat rules ~tre presented in the following. 
a.1 Chart Parsing as Argumentation 
Based on the framework that defines chart parsing as deduction, we define arguments corresponding to fundanaental rules of top-down chart parsing, predic- tion, and completion steps, as follows. 
member([a ~-- bT, i, j, a.], Agenda), 
member([b ÷- ,8, j, j, _], Agenda) [sn+l 

}{ere, Chart and Agenda respectively denote a chart and an agenda list as in usual implementations of chart parsing. Lower case roman and Greek letters indicate schema variables. 
,~en, be,'([a ~-bT, i, j, o.], Agenda), 
mernber([b +-, j, k, ~], Chart) Is,, c°'2~'~ member([a ,-- 7, i, k, ab], Agenda) Is,,+1 

This is for cases where an inactive edge [b ~-, j, k, fl] is in Chart. Cases where the inactive edge is in Agenda are described similarly. Both of the above arguments may be satisfied when applicable. 
Since, in a chart parsing algorithm, an edge from tile agenda must be removed and added to the chart when the above arguments are applied, the following argument is necessary. 
mernber([a ~--fl, i, j, c~], Agenda) [s,, ,a~o,~ 
me. 	ber([a i, j, Agenda), 
rncmbe r( [a ~-- /3, i, j, a] , C h.art ) I.s,~+l 
Here, we assume that propositions continue to hold unless they are denied. That is, 


--	~ ISn.t-1 
A subsume argument is necessary to keep edges nonredundant. This is one characteristic of chart parsing. 
member(e, Agenda), already-in(e, Chart) Is, '"~'~ -~mernber( ¢, Agenda) Is,~+l 
Only when the subsume argument does not hold, is the prediction or completion argument permitted. Therefore, the following defeat rule is necessary. 

When both a subsume argument and a pre-
diction/completion argument are possible, 

tile former defeats the latter. 
One of the important characteristics of chart pars- ing is that it can control the order of parsing pro- cesses, that is, the order of edge selections from the agenda. This aspect is suited for treating defeasible reasoning. To incorporate such control, we modify tile prediction and completion arguments. First, we select an edge from Agenda and put it on a list called Cache. Then, we apply the prediction and comple-tion argltmeltts to the edge in Cache, and add the resulting edges into Agenda. The selection argument is as follows. 
select
member(¢,Agenda) [s,~ ==:>. 
--member(e, Agenda), 
member(O, Cache) [sn+ 1 

':['he edge addition argument is modified by replacing Agenda with Cache. 
Several selection arguments are generally possible because of plural edges in Agenda. Selections are classified according to types of edges. The following is classification of selection arguments based on types of edges in the premise of the arguments [15]. 
prediction-type: ¢ = [a ,-- fl, i, i, _] 
active-type: ¢ = [a ~ 7, i, j, fl] 
inactive-type: ¢ = [a ~--, i, k, fl] 
lexical-type: ¢ = lexical inactive edge 
where we List only 4) in member(¢, Agenda) instead of listing tile whole selection argument. 
3,2 Sinmlation of LR Parsing for English 

For selections of instances of selection argument, that is, selection of edges from the agenda, we have the following defeat rules b~sed on [15], which guide the parser to determine an appropriate syntactic struc- ture of English sentences ms the first solution. The deductive parser by [15] simulates LR parsing, which reflects right association and minimal attachment readings. 
(i) 	If there is more than one possible argument, prediction-types defeat lexieal-types, which de- feat active-types, which defeat passive-types. 

260 	2 
(2) 	
If (1) does not fully order possible arguments, arguments with items ending farther to the right defeat the others. 

(3) 
If (1) and (2) together do not fully order possible arguments, arguments with items constructed from the instantiation of longer rules defeat the othert~. 


Shieber devised the above preferences based on correspondences between an I,P~. parser and a chart parser, and on preferences of shift/reduce and re-duce/reduce conflicts in English [13]. 


Japanese Sentence Analysis 

4,1 Simulation of LR Parsing for Japanese 
For ,Japanese sentences, however, the above defeat rules are inappropriate. Japanese sentences have the following characteristics. 
* 	When we read/hear a. Japanese sentence from left. to right, we usually relate the word/phrase just, read to the next word. 
-	A Japanese sentence generally have a recursive structure derived by a rule modifier + h{ad [2]. 
These two characteristics result in a tendency for .lapanese sentences to have left. branching structures like [[[[[[[[neko ga] oikaketa] ,,czur,d] gel tabeta] .,;akana] ,vet] shinsendatla] (The fish that the rat that the cat chased ate was fresh.) [9]. \Ve can cap- ture the left. branching characteristics by the strategy of re&tee preference when shifl/rc&~ce conflicts occur against Shieber's strategy, llere, these arguments do not me~m that a aapnese sentence always has a left branching structure, but they" do mean that the preferable reading tram to resuhs in the left branch- ing structure, provided that linguistic constraints are satisfied, i, br example, R)r 7'arc, ga kou,,~ ~i iku (Taro Subj park Goal go. "Taro goes to a park."), the structure is [[Taro gel,, v [[kouen ni]vv ikuv]8@, mtd is not left branching, since Taro ga is not re-lated to kouen. In this case, we try to combine 7~r0 ga with Ko,ten, and since a relation between "/at0 9a and Konen does not hold, the above structure is tried. 
To simulate the strategy of reduce preference when 
shill/red'ace cont]icts occur, the following three rules 
in addition to (1) replace rules (2) and (3) for a 
[)roper treatment of Japanese. 
(4) 	
If (1) does not fl~lly order possible arguments, arguments with longer items defeat the oth-ers. (Length is defined as ending position minus starting position.) 

(5) 	
If (1) and (4) together do not fully order pos- sible arguments, arguments with items starting farther to the left defeat the others. 


((i) If (1), (4) and (5) together do not fully or-
der possible arguments, arguments with items 
pushed into the agenda earlier dethat the oth- 
ers. 

Rules (4) and (5) are based on the preference for left, branching structures. Becm.lse these preferences tend to prevent the parser from proceeding to the right, rule (6) is necessary for longer phrases. These rules have been tested for basic sentences [17], some of which are syntactically ambiguous. For example, there are many Japanese noun phrases that have the following pattern. 
N1 no N~. no ... no Nk 
N1 poss Nu poss ... poss Nk 
N~, of N~-I of ... of N1 


Generally there can be 2"-1(2n- 3)!!/n! possibli- ties for this noun phrase, which is computed by dependency combinations like ((((N1 no N2) no) 
...,~o)N,,). 
4.2 Feature Incorporation 
Contemporary parsing technology is based on con> plex feature structures. Chart parsing uses such lin- guistic constraints presented by features when com- pletion and/or prediction steps are applied as in [14]. Accordingly, for example, a compleX, ion argument for cases where an inactive edge is in the chart is as fol- lows. 
"membe,'([a ~-- b 7, i,j, a, el, Cache), 
member( [b ,-, j, k, fl, f ], Chart), 
unify(e, [b: f], g)Is,~ ~'°'2~ ~t~ 
rnember([a +-- 7, i, k, ctb,g], Agenda) Isn+, 

where e,f and g are feature structures, and .unify(x, y, z) means that z is the result of unifying x and y. 
Feature structures uniformly represent various lin- gtlistic constraints such as subcategorizations, gaps, unbounded dependencies, and logical forms. A prob- lem of this representation scheme is that it describes all possible constraints in one structure and deals with them at once. This is inefficient with many copy operations due to unfications of unnecessary features that do not contribute to successful unification [6]. Thus treatments such as strategic unification [6] have been developed. 
It seems that a preferable approach is to treat lin- guistic constraints piecew'ise, taking into consider> tion abductivity of parsing, uniform integration of various linguistic proc~ssings, and the problem of a unificat.ion-based approach. From this point of view, we describe such treatments as, especially, incorpora- tion of word properties, case analyses, composition of logical forms, and interpretMon of noun phrases with adnominal particles. This section discusses the incorporation of word properties, and the following section the others. 
Word properties are incorporated using lexical ar- 
guments when a. lexical edge is in Cache. For ex- 
ample, semantic categories of Tarv (boy's name) are 
incorporated using the following lexical argument. 
.~,.t~,.([Xv ~., O, 1, Ta,.o, X], Ca,:he), 
scategorg(Taro, Animate) [s,~ ,,.oun~.ov scatcgorg( X, Animate) Is,~4.1 

3 	261 

where the edge representation is redefined adding the 
identifier X for the edge. seategowj(x, e) means that 
x's semantic category is c. 
Likewise, proposition partiele(x,p) is introduced for edge [P ~--, i,j,p, a:] corresponding to a particle. 
Properties of constituents are generally propa-gated to their mother. For example, since the above Taro and ga (subject e~se particle) are combined to make a postpositional phrase (Pp), their prop-erties are propagated to the postpositional phrase, and used for case analyses. 
member([Pp +-, i, j, Np P, x y z], Cache), seatcgory(y, c), particle(z, p) Is,, 



vpeategorvO:, p, e) 
where ppcategory(a~,p,c) means that postpositional phrase Pp identified as a~ has particle p, usually a case particle, and semantic category e. 
A subcategorization frame for a verb is introduced as follows 1 
member([S ~, j, k, v, x], Cache), 
subcat(v, role,p, c) !,s,, 
~%':~,'ov subcat(x, role,p,c) {s,,+l 

where subcat(v,role,p,c) means thai. verb v sub-categorizes for a postpositional phrase with par-ticle p and semantic category c. For example, subcat( X, Sub j, Ga, Animate) is introduced for edge [S +--,2,3,asobu, X] corresponding to verb asobu (play). This is an argument for an intransitive verb. Here, for simplicity, we use the intransitive ease. Arguments for plural case roles can be rep-resented in a similar manner by just adding ex-tra subcat predicates for the other cast roles like subcat(v, role2, P2, C2). 
Like the property propagation of postpositional phrases, when the above edge [S --+, j, k, v, z] is com- bined with active edge [S ~ S, i,j, Pp, z y z], a sub- categorization frame is propargated for later use, as follows. 
member(IS +--, i, j, Pp S, x y z], Cache), member([S ~, j, k, v, z], Chart), subcat( z, role, p, c) [s,~ 
,,,b~rov subcat(x, role,p, c) Is,,+~ 

4.3 Case Analysis Arguments 
Two important characteristics of Japanese sentences are that it exhibit fi'ee word order, and that it has zero pronouns, i.e., subjects or objects which are not explicitly expressed, but are supplied from the context. Accordingly, ease particles and semantic categories of head nouns are necessary to analyze relations between postpositionM phrases (Pp) and verbs (v). In some cases, only modal particles are used instead of case particles [11]. Therefore, seman- tic categories are important for subeategorization or case analysis. These characteristics of Japanese in- evitably necessitate defeat rules for practical analy- ses. 
1 Here, we assume that a verb itself can be ~ Japanese sentence, and use Japanese gr~tmmar rules including S -+ v, and S --* PpS [17]. 
Two basic arguments of case analysis are a rule for obligatory e~tses (subcategorization) and a rule for optional cases (adjunction). 
Subeategorization The argument for obligatory case analysis is as fob lows. 
Pp S, i, j, V d, Cache), subcat( z, role, p, c), ppeategory(y , p, c) ls'n 
$ubcat 
relation(z, y, role) [s,~+a 
where relation(z,y, role) means that the postposi-tional phrase y is the case role of phra.se z. For ex- ample, when there is ppcategory(Y , Ga, Animate) corresponding to postpositional phrase Pp with iden- tifier Y, and there is subcat(Z, Subj, Ga, Animate) corresponding to sentence S with identifier Z, we get 
relation(X, Y, Sub j). 
Adjunetlon 
The argument for optional case analysis is as follows. 
member([S ~, Pp S, i, j, x y z], Cache), adjunction(y, role, p, c), ppcategory( y, p, c) I*,, 
~dj~io~ relation(z, y, role)Isn+l 
where adjunetion(y, role,p, c) means that postposi-tional phrase y modifies sentence z in the relation role when y h~s the postposition particle p and the semantic category c. 2 The properW a@unetion(y, role, p, c) is introduced for particles or adverbial 
nouDs, 
No case relation holds when the above arguments do not hold, which is represented by the following argument. 
member([S ,-, Pp S, i, j, a~ y z], Cache), 
subcat(z, role,p, c) [sn 
cr]ailurc 
-,relation(z, y, role) Isn+l 
There is a similar argnment for an adjunct case. The above argument always holds when it is applicable, but it should be defeated when the subcategorization or adjunction argument holds. Thus, we haw~ the following defeat rule. 
If a subcategorizaiton or adjunction argu-ment holds, the case relation failure argu- ment is defeated. 
When a case relation failure argument holds, it is preferable to retract the premise edge which trig- gered case relation analyses. This is represented by tile following argument. 
member([S' +--, Pp S, i, j, x v z], C.d,e), 
-~relation( z, .Y,. role) Is,, ,.c,r~ct 
-,member([S +--, ep S, i,j, x y z], Cache) Ix 
2Strictly speaking, there are correlations between types of adjunctive phrases (Pp) and types of setences 
(S) [10]. Here, we do not represent such correl,~tions for simplici ty. 

Composition of Logical Forms Like case analyses, composition of logical forms is treated as follows. 
member([S ~--, i, j, Pp S, x y z], Cache), lf(z,p(a')), If(a, a'), relation(z, a, ,') Is, ']~'P lf(x,p(a')) I,s,~+, 

This is an argument for an intransitive verb where lf(x,x') is introduced by lexieal edge introduc-tions, and means that the logical form of the con-stituent x is x'. The premise predicates of this argument are satisfied providied that instances of relation(z, y, role) and lf(y, y') hoht. For the case of Taro ga asobu (Taro subj-case play, "Taro plays"), If(X, play(Taro)) holds when l f ( Z, play(a')), If(Y, Taro), and relation(Z, Y, Subj) hold. 
4.4 	Plausible Case Analysis 
The above two rules result in the possibility that a given Pp may fill both obligatory and optional c~Lses. On the other hand, the requirements ,subcat(y, role, p, c), adjunction(y, role, p, c), and ppcategory(y, p, c) in the above rules are too strict, for practical liguistic processings, since there are noun phrases with modal particles, no particles, and no strict cat- egory matches. Therefore, we relax the requirement ppcategory(y, p, c) replacing it with one of the fol- lowing conditions. That is, if some of the arguments having the following conditions hold, a given Pp can fill the corresponding case roles. 
(a) 	
ppeategory(y, p, c), 

(b) 	
ppcategory(y, p, e'), isa(c', c), 

(c) 	
ppcategory(y, p, c'), -~i,sa(c', e), 


(d) 	
ppcate,aory(y, p', c), 

(e) 
ppca* 9orv(y, p', i,a(c', 


if) 	pp ategorv(v, p', c'), c), 
where isa(e', c) means that c is a super semantic cat- 
egory of e', and m(p') means that / is a modal par- 
ticle. 
Thus, when we replace the requirement condition in the two arguments given above with conditions (a) 
-(f), we obtain twelve arguments for case analysis. This results in the possibility that some constituent may be analyzed as filling more than one possible case role. Therefore, we need defeat rnles to select the appropriate case analysis argument. The follow- ing are two basic defeat rules. 
(1) 
Generally, the strength order is (a) > (b) > 

(c) 
"> (d) > (e) > (f) except :for the follow- ing condition (2). (e) and (f) do not hold for optional cases. 


(2) 
If both 	obligatory and optional cases fill (a) or (b), the obligatory case defeats the optional case. That is, (a)ob > (b)ob > (a)op > (b)op. 


The fact. that (c) and (f) cannot be satisfied by op- tional cases means that semantics is important when optional information is expressed. Rule (2) means that syntax is important when case particles are ex- pressed explicitly. 
For the sentence 
Walashi mo non-da. 
I modal-particle drink-past. 
I drank (something), too. 

an argument using (d) concludes that watashi mo is the subject, while one using (f) concludes that it is the object. As (d) defeats (f), walashi rao is deter-- mined to be the subject. For the sentence 
Budoushu mo non-da. 
wine modal-particle drink-past. 
(Someone) drank wine, too. 

the reverse conditions hold. 
F'or noun phrases with relative clauses constructed by Np -~ 3 Np, the Np on the right of S may be a case element of S. In such cases, we use properly t)pcategory(x,p,c) with variable p, which is not in-stanciated when applied, and it is assumed that only (a.) and (b)hold. 
4.5 	Interpretation of Japanese Noun Phrase A no B 
integration of syntact.ic, semantic, and pragmatic processings is an interesting and complex problem [3], and the treatment by the argumentation frame-- work is a promising approach to this problem. As for such a problem, interpretation of Japanese noun phrase patterns of the type A no B, which abound in Japanese [16], is a good testbed. 
A no B, which consists of two nouns A and £' with an adnominal particle no, and which has at. least the same ambiguity as B of A, is generally interpreted by assuming an appropriate predicate [16]. For ex- ample, densha no mado (a window of a train) is in- terpreted as densha (train) ni (Loc) aru (be) mado (window), supplementing a verb amt (be). A no 1) is generally ambiguous when taken out of context as IIanako no e ("the picture of Hanako" or "ttanako's picture") with a range of possible semantic relations including possession, producer, purchase, and con--tent. 
We can interpret semantic relations of A no B by using arguments in a similar way as before For ex- ample, from the following sentence 
IIanako wa e o kakimasu. 
llanako paints a picture. 

tile propositions If(X1, Paint(Hanako, O)) and If 
(X2, Picture(O)) hold. In this context, we can in-
terpret an A no B relation of the following sentence 
Kono Hanako no e wa kireida. 
This picture of Hanako is beautififl. 

For the second sentence, the relation(Y, z, No) and If(Y, Hanako) hold for an edge correspoinding to Pp (Hanako no), and If(Z, Picture(O)), lf(Z, p(a',O)), lf(a,a'), relation(a, Z, No) for an edge Np (e). Then we have propositions relation(Y, Z, No) and lf(X, p(Zlanako, O)) based on the follow- ing argument. 
5 

rnember([Np +--, Pp Np, i, k, x y z], Cache), 
lf(z,p(y', z')), relation(y, z, No), If(y, y') Is~ 
a_,_~ If(x, p(y', z')) I.%+1 

Finally, we get Paint(Hanako, O) using the follow- ing argument, 
relation(y, z, No), lf(z,p(al, a2)), 
lf(c, q(al,a~)) [s,~ 
in_~o lf(z, q(al, a2)) ISn+l 


and thereby complement the meaning of Hanako no e by extrapolating the verb Paint. 
If it is learned that Hanako in fact bought the pic- ture, and not painted it, the final interpretation is defeated using the same framework. 
Conclusion 

We have presented an argumentation-based model of Japanese sentence analysis, which is essentially ab- ductive. We believe that this model is well suited for sentence analyses including various linguistic processings under conditions where information ex-pressed by utterances is partial and its interpretation depends on context, for the following reason. Since 
[3] J. 	tlobbs, M. Stickel, P. Martin, and D. Ed- wards. Interpretation as abduction. In Proceed-ings of the 26th Annual Meeting of the Associ- ation for Computational Linguistics, 1988. 
[4] M. Kameyama. 	A property-sharing constraint in centering. In Proceedings of the 2~th Annual Meeting of the Association for Computational Linguistics, 1986. 
[5] M. Kay. 	Algorithm Schemata and Data Struc- tures in Syntactic Processing. Technical P~eport CSL-80-12, Xerox PARC, 1980. 
[6] K. 	Kogure. Strategic lazy incrementM copy graph unification. In Proceeding of the 13th In- ternational Conference on Computational Lin-guistics, 1990. 
[7] K. Konolige. Defensible argumentation 	in rea- soning about events. In Proceeding of the In- ternational Symposium on Machine Intelligence and Systems, Torino, Italy, 1988. 
[8] K. Konolige and M. E. Pollack. Ascribing plans to agents. In Proceeding of the llth Interna-tional Joint Conference on Artificial hztelli-gence, 1989. 
[9] S. 	Kuno. Japanese Grammar (in Japanese). Taishu-kan, 1973. 

the argumentation system is incremental and has the ability to cope with resource limitations [8], the anal- ysis systems based on this argumentation system can return an appropriate decision that has been derived to that point. 
The original heuristics to which arguments and de- feat rules are formally described have been tested with about a thousand sentences over a period of more than five years. For case analysis, arguments and defeat rules that handle zero prononns [4] could be introduced, thereby making reasoning about case analysis much more precise. Generally speaking, de- feat rules for case analyses are based on the idea that, for new information, syntactic constraints are pre-ferred, and, for old information, semantic and wag- matic constraints preferred. Finally, arguments such as those presented by [8] will also be necessary. Such arguments should be integrated with the arguments described in this paper. 
Acknowledgment 
I would like to thank Douglas Appelt, Jerry Hobbs, Yasuhiro Katagiri, Masahito Kawamori, Kiyoshi Ko- gure, Kurt Konolige, Shozo Naito, Martha Pollack, and Ikuo Takeuchi for their discussion, comments, and improvements on this research and paper. 
References 
[1] D. E. Appelt. Weighted abduction 	as an infer- ence method for plan recognition and evalua- tion. In Proceedings of the Second Inlernational 
Workshop on User Modeling, 1990. 
[2] T. Gunji. 	Japanese Phrase Structure Grammar. Reidel, 1987. 
[10] F. Minami. 	Structure of Contemporary Japanese (in Japanese ). Taishu-kan, 1986. 
[11] S. Naito, A. Shimazu, and It. Nomura. Classifi- cation of modMity function and its application to Japanese language analysis. In Proceedings of the 23st Annual Meeting of the Association for Computational Linguistics, 1985. 
[12] F. N. Pereira and D. tI. D. Warren. Parsing as deduction. In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics, 1983. 
[13] S. M. Shieber. Sentence disambiguation by shift- reduce parsing technique. In Proceeding of the gist Annual Meeting of the Association for Computational Linguistics, 1983. 
[14] S. M. Shieber. Using restriction to extend pars- ing algorithms for complex-feature-based for-malisms. In Proceeding of the 23rd Annual Meet- in 9 of the Association for Computational Lin-guistic.s, 1985. 
[15] S. 	M. Shieber. A Uniform architechture for Parsing and Generation. In Proceeding of the I2th International Conference on Computa-tional Linguistics, 1988. 
[16] A. Shimazu, S. Naito, and H. Nomura. Seman- tic structure analysis of Japanese noun phrases with adnominal particles. In Proceedings of the 25th Annual Meeting of the Association for Computational Linguistics, 1987. 
[17] A. Shimazu and S. Naito. Preference reading models of Japanese sentences (in Japanese). In Technical Reports NL-73-9 of Natural Language Processing Special Interest Group of Informa- tion Processing Society of Japan, 1989. 

264 	6 







