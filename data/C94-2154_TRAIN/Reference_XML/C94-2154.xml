<PAPER>
	<ABSTRACT>
		<S sid ="1" ssid = "1">in this pa,per, we argue tha, t type inferencing incorrectly implements a.pl)rolwiateness specifica.tions for typed [ea.ture structures, promote a combina.tion of l;ype resolution and unfilling a,s a. correct a.nd ef&apos;~ ticient Mternative, and consider the expressive limits of this a.lterna.tive approa.ch.</S>
		<S sid ="2" ssid = "2">![&apos;hroughout, we use feature cooccurence restrictions as illustration and linguistic motivation.</S>
	</ABSTRACT>
	<SECTION title="INTRODUCTION" number = "1">
			<S sid ="3" ssid = "3">Unification lbrmMisms ma.y be either un-typed (DCC~s, PATRII, 1,F(;) or typed (npsG).</S>
			<S sid ="4" ssid = "4">A m~L,ior reason for adding types to ~ forma,lism is to express restrictions on fea.ture cooccurences a.s in (;l&apos;s(:: [5] in order to rule out nonexista.nt tyl)es of objects.</S>
			<S sid ="5" ssid = "5">For example, there a.re no verbs which have the [km.ture +R. The simplest way to express such restrictions is by mea.ns of a.n a.ppropria.teness pa.r-tim flmction Approp: Type × Feat ~ Type.</S>
			<S sid ="6" ssid = "6">With such a.n a.pl)rol)riatleness specifica.- tion lrla.tly Sllch restrictioi,s may be expressed, though no restrictions involving reentrancies ma.y be expressed.</S>
			<S sid ="7" ssid = "7">In this pal)er, we will first in §2 survey the range of type eonstra.ints tha.t ma.y be expressed with just a. type hiera.rchy and *&apos;]&apos;he resea.rch pl&apos;eS(!lllL(&apos;d ill |,his; paper was pay tia.lly sponsored hy &apos;[kfilprojekt B4 &quot;(;onsl.rahH.s on Grammar fl~r Efficient Ck:neration&quot; of the Soi,der forschungsbereich 340 of the Deutsche [&quot;orschungsgemeinscha, ft. &quot;VVe would also like to thank &apos;l&apos;hilo GStz for helph,l comments ou thc ideas present.ed here.</S>
			<S sid ="8" ssid = "8">All mistakes a.rc of collrsc our OWll.</S>
			<S sid ="9" ssid = "9">IKI.</S>
			<S sid ="10" ssid = "10">Wilhehnstr.</S>
			<S sid ="11" ssid = "11">113, |)-721174Tfilfi,,ge,, (ler- ma.ny, {rig,King} g&apos;~sfs.n phil.uni-I uebingen.de.</S>
			<S sid ="12" ssid = "12">a.n N)propria.teness specification.</S>
			<S sid ="13" ssid = "13">Then in ~3, we discuss how such type cons|fronts linty be mainta.ined under unification as exemplilied in the na.tura.1 language D~rs- ing/generation system &apos;.l&apos;ro]l [7].</S>
			<S sid ="14" ssid = "14">1 Unlike previous systems such as ALl,:, Troll does not employ a.ny type infereneing, inste~M, a, limited amount of named disjunction ([1 1], [12], [6])is introduced to record type resol u tion possibilities.</S>
			<S sid ="15" ssid = "15">The a.lnount of dis- junction is a.lso kept small by the technique of unlilli,g described in [9].</S>
			<S sid ="16" ssid = "16">This strategy a.ctua.lly ma.inta.ins apl)ropri~tteness conditions in some ca.ses in which a. type in-ferencing stra.tegy would fa.il, l)&apos;inMly, in §4, we discuss the possibilities for genera lizillg this a.pl)roa.ch to ha.ndle a bro~Mer r~tnge of constra.ints, including constraints inw)lving reentran cies.</S>
	</SECTION>
	<SECTION title="APPROPRIATENESS FOR, MALISMS. " number = "2">
			<S sid ="17" ssid = "1">As discussed iu Gerdemann ,~ King [8], one ca.n view a.pl}rol)ria.teness CO[lditions as (lelining GPSG style fea,1;tl re cooccurence restrict:ions (FCRs).</S>
			<S sid ="18" ssid = "2">In [8], we divided FCRs into co,j,,ctive and di.q,,~ctive ct~sses.</S>
			<S sid ="19" ssid = "3">A conjunctive FCI/.</S>
			<S sid ="20" ssid = "4">is a constra.int of the following fornl : i[&apos; a.n object is of ;~ cert;fin kind then ill deserves certa.in fea.tures with wdues of cert~till kinds An FCI~ stat:ing tha,2: a. verb must h~we v and N t&apos;eatures with values A- and -respectively is a.ll example of a. conjunctive FCI{.</S>
			<S sid ="21" ssid = "5">A disjunctive I&quot;CI{.</S>
			<S sid ="22" ssid = "6">is of the form: l rl&apos;he &quot;]&apos;roll ,qysl.em was implemented in Quintus Prolog by Dale (lerdemann and &apos;[&apos;hilo (]Stz.</S>
			<S sid ="23" ssid = "7">if an object is of a. cel&apos;taiu kiud then it deserves cerl;a.in [ca,1;tll&apos;C~s with vMues of certa.hi kinds, or it deserves cerl.ahi (pei&apos;ha.liS other) fea.1;u res \vil, h viiiues of terra.in (perlla.ps other) kinds, or ...</S>
			<S sid ="24" ssid = "8">(31:it i:leserw.;s i:erl;a.in (lmrhal)S other) fea,1;llres wil.h Vi, l.[ll(~S o[ certain (perha.ps other) khi,&lt;ls lo::I exa~]nple, the following F(&apos;,|/.</S>
			<S sid ="25" ssid = "9">sl.a.t.iug tha,t inverCed verbs lilt|S1, lie a.uxili;tries is disjunctive: a verb Ilitisl; ha.re the [&apos;(~il.l.tll&apos;(~s INV and AUX with va.l/ies d a.Iid I, -a.iitl i L-, or -;Mid -respectivel.y. Both o| these |el&apos;illS or l,&apos;(&apos;,lls iiHly I)(!</S>
			<S sid ="26" ssid = "10">expressed in a. foi&apos;llla.iiSlli euiployhi&lt;~ fiiiil.e lia,rtia.[ order (Type, E) o| types tllldel&apos; sub- 8illnptioli&gt; a, finite sel.</S>
			<S sid ="27" ssid = "11">Feat of ro;./.t;tll.(~s, and an a.pprol)ria.teness parl, ial rliilcl.ion Approp:Type X Feat -~ Type.</S>
			<S sid ="28" ssid = "12">[uluitively; the l, ypes fornla.lize I;lie notion ol&quot; kinds +,j&quot; objecl, t g: t,&apos; ill&apos; ca.oh oil|eel, of tyl&gt;e t&apos; i~&lt;i Mso of l;Ylle L, il, ll(] Approp(l, f) = lI ill&apos; (!;i(&apos;[I object oF type t deserves [eaA.urt~ f wil.]i :i. Vi./.]lle or type ft. ~@&apos;e call S/IC]I it.</S>
			<S sid ="29" ssid = "13">[Ol&apos;tll;liiSlll i-i, ii ;I,])l)l&quot;Opl&apos;]al, olio,~/ fOl&apos;lllil]i~;lll.</S>
			<S sid ="30" ssid = "14">(&apos;,iLl&apos;- peliLel&quot;,s AI,F, and (,erdeliia.</S>
			<S sid ="31" ssid = "15">i ;ill(| (i(~t,z&apos;s Troll are ex:-t.niples o| illilllenienl.a.Lions o| a,pF, ro]) ria, Loliess |or illa.[iSlil,s. l low an a.i)ln&apos;oprhi.teness [orniaJisnl enco&lt;les a conjunctive I:(&apos;,R is ob\.&apos;i&lt;&gt;us~ bll(.</S>
			<S sid ="32" ssid = "16">llOW it encodes a disjuiictive I&quot;(&apos;,1{ is less so.</S>
			<S sid ="33" ssid = "17">Ali exa.niple i|]usl;ral;es best how it.</S>
			<S sid ="34" ssid = "18">is done.</S>
			<S sid ="35" ssid = "19">~Ul)pOS0 that F( &apos;,1{ [i sl.al.es l.hal, ob- .iecls (if type t deserw!</S>
			<S sid ="36" ssid = "20">[(!a.[./ll&apos;(!S f &apos;and .q, I)oth with boolea.I/ wdues a.ll(I [&apos;lll&apos;l,[lel&apos;lllOF(~ that the va.hies of f aild g iil/lSl al~r(!e, [&gt; is the disjunct]w! I&quot;(111.</S>
			<S sid ="37" ssid = "21">if a,u object is o[ type l then it deserw:s f with va.lue -I- and q with wdue +, or it deserw.~s f with va.lue a.nd 9 with value - To 0ncode [3&gt; first iul,rodLiCe sul/l.yltes , t ~ ;+l.ll([ l&quot; of I (1 E I/, 1.##), O11(!</S>
			<S sid ="38" ssid = "22">SUl)tyl)e [&apos;()l&apos; ea,ch disjuuct iu the cousequenl, of&apos;p.</S>
			<S sid ="39" ssid = "23">Then encode the ]&apos;ea.tli[&apos;e/wthl~.~ &lt;&apos;on(!il.illliS in l, he [irst disjunct ILy putthlg Approp(t&apos;, ./) :: ~-a,nd Approp(//~ q) -+, and encode the I&apos;eature/value conditions in the second dis-juu(:t by putting Approp(t&apos;,f) = -.</S>
			<S sid ="40" ssid = "24">and Approp(t&apos;,g) = . .&apos;2 This a pproa,ch Ina, kes two inll)ort;a, lll, closed-world type assumptious a, bouL (.he types tli~d; Slll)SlllIle 11o ogher types (hellCe- forth species), l:irst, the p;i.rtition conditiOII states tha.t for each type t, if a.n object is (31&apos; type t theu the object is of ex-ax-I.ly o11(2 species subsulned by t. Second, the all-or-nothing cclndition sta, tes that 1&apos;(31&apos; each species ,q a.itd fea.ture f, either every el&quot; IIO ol&gt;,iecl, or species s deserves feature .#c.3 All a.l)ltroltriM,eliess [orli+ia.lisill sllc]l a.s ALl:, ([2], [3])ti,;t.l. does not uieet both c.ouditions llla.y llOt; ]lroper[y el|cOde a, disjull(&apos;- five l&quot;(:l/.</S>
			<S sid ="41" ssid = "25">For exalnple, consider disjunctive I&quot;CI{.</S>
			<S sid ="42" ssid = "26">p. An a.I)prl;)pria.l, elleSS [ornia.l--iSlli I/lily l/O( properly encode 1,hi~t t / a.lld t&quot; i&apos;el)rt,selil, MI a.lid oilly the disjuncl, s ill the COll.qeqll(Hlt or [i wiLhout the i)a.rl,ition COll-d]tion.</S>
			<S sid ="43" ssid = "27">&lt;till a.llln&apos;ol)riill.eness [orlila.liSlll llia,y IIOl.</S>
			<S sid ="44" ssid = "28">llrOl)erly encode the [t~ii.l.llle/vii.hle (:(lll-&lt;liiriOii: deinanded liy em&apos;h disjuncl, hi the COli.~t!qllelil.</S>
			<S sid ="45" ssid = "29">o| p wilhoul, the a.i[-Ol&apos;-liot;hilig c(m(til.ion.</S>
			<S sid ="46" ssid = "30">As indicat.ed a.bove, AI, I.; is iLIi exa.tlli)le o| it.</S>
			<S sid ="47" ssid = "31">f(n&apos;liialiSlU I.ha.l, does it(it ineel; llol;h o| 1.hese closed world aS,glllnlil,iOli.g. In AI+E :-/.</S>
			<S sid ="48" ssid = "32">[&apos;eli.l.tlr(~ st.i&apos;llCtlile i.&lt;4 won typed ifl&apos; for ea.ch arc iit the te:+d.ure sI.l&apos;tlCl;tlr0, if&apos; 1,he SOtll&apos;(&apos;(~ node is labelled wil.h type /., the targel; node is lallelled with 1;ype l / a.lld the il.i&apos;c is IMlelled with [ea.tlll&apos;(~ f 1,lien Approp(/.&gt; .f) [ l/.</S>
			<S sid ="49" ssid = "33">Furl.her|note&gt; a [&apos;eal, urt~ strut(tire is &gt;l&apos;lds exanll)h: I:(JR is, for eXlmsil.ory l)nrl)oses, quilt simph&apos;.</S>
			<S sid ="50" ssid = "34">&quot;l&apos;hc prolileni o[ c.xpr(&apos;.sshig F(Jl/&apos;s, however, is a l&apos;Cal Iiuguisl.ic i)rol)lcin.</S>
			<S sid ="51" ssid = "35">As noted I)y Copcstakc.</S>
			<S sid ="52" ssid = "36">ct al. [4], it.</S>
			<S sid ="53" ssid = "37">was inipossihlc I.o c.xpress CV(&apos;II Ihc .~ilii[)]oM.</S>
			<S sid ="54" ssid = "38">forilis o[ l&quot;(JRs in l.hc.ii7 c×tciidcd VCISiOII (it&apos; AI.E. &apos;[&apos;hc basic principle of expressing l&quot;Clls also ex lends Io I&quot;(&apos;,[(s iuvolviug longer palhs.</S>
			<S sid ="55" ssid = "39">For example, to (:llSllt&apos;t: thai.</S>
			<S sid ="56" ssid = "40">for the type l, I.he path (fg) lakes a vahie subsuuied I)y .% one nlust tirst hll, ro ducc the chaiu Approp(/, f) = .,, Approp(&apos;a, g) = .~.</S>
			<S sid ="57" ssid = "41">Silch ilil.crlllCdialc I.&apos;~&apos;l)lts COllid ll(!</S>
			<S sid ="58" ssid = "42">hll.rodllced a.&lt;-; part o[ a (onilli[al.iou sl.age..</S>
			<S sid ="59" ssid = "43">4 Nob: I.hal.</S>
			<S sid ="60" ssid = "44">Ihesc cl,&gt;s&lt;,d world assulnplions art&apos; explicitly made in Pollard ,t,.</S>
			<S sid ="61" ssid = "45">Sag (rorthcoming) [14]..</S>
			<S sid ="62" ssid = "46">well-typable iff the feature structure subsumes a well-typed feature structure, in ALl.:, type infereneing is employed to ensure that all feature structures are well-typable--in fact, all feature structures are well typed.</S>
			<S sid ="63" ssid = "47">Unfortunately, well-typability is not sufficient to ensure that disjunctive FCRs are satisfied.</S>
			<S sid ="64" ssid = "48">Consider, For exam- pie, our encoding of the disjunctive FCR p and suppose that 99 is the fe, ature structure t[f : +,9 : -].</S>
			<S sid ="65" ssid = "49">90 is well-typed, and hence trivially well-typable.</S>
			<S sid ="66" ssid = "50">Unfortunately, 99 vb elates the encoded disjunctive FCR p. The only way one could interpret ~ as well-formed.</S>
			<S sid ="67" ssid = "51">By contrast, the Troll system described in this paper has an etfeetive algorithm f&lt;&gt;r deciding well-formedness, which is based on the idea of efficiently representing disjunctive possibilities within the feature structure, Call a well-typed feature structure in which all nodes are labelled with species a resolved feature structure and call a set of resolved feature structures that have the same underlying graph (that is, they differ only in their node labellings) a disjunctive resolved feature structure.</S>
			<S sid ="68" ssid = "52">We write fS, ~vf8 and &apos;D~.)c$ for the collections of feature structures, resolved feature structures and disjunctive resolved feature structures respectively.</S>
			<S sid ="69" ssid = "53">Say that F&apos;E RFS is a resolvant of F E FS iff F and F&apos; have the same underlying graph and F subsumes F&apos;.</S>
			<S sid ="70" ssid = "54">Let type resolution be the total function R:-&gt;DRFS such that R(F) is the set of all resolvants of F. Guided by the partition and all-or-nothing conditions, King [13] has formulated a semantics of feature structures and developed a notion of a satisfiable feature structure such that F E FS is satisfiable iff R(F) 0.</S>
			<S sid ="71" ssid = "55">T$ is satisfial~le if[&apos; 7~(F) 7 ~ (7).</S>
			<S sid ="72" ssid = "56">C, erdemann ,% King [8] have also shown that a feature strtlcture l]leets all encoded FCRs ifl&quot; the feature structure is satisfiable.</S>
			<S sid ="73" ssid = "57">The Troll system, which is based on this idea, effectively inqflements type resolution.</S>
			<S sid ="74" ssid = "58">Why does type resohttion succeed where.</S>
			<S sid ="75" ssid = "59">type inferencing fails?</S>
			<S sid ="76" ssid = "60">Consider again the encoding of p and the feature structure 9~.</S>
			<S sid ="77" ssid = "61">Loosely speaking, the appropriateness sl)eeifieations for type t encode the part of p that sta, tes that an object of tyl)e t deserves features f and g, both with boolean vahles.</S>
			<S sid ="78" ssid = "62">However, the appropriateness specifications for the speci- ate sul)types t&apos; and t&quot; of type t encode the part of p that states that these val-lies lnust agree.</S>
			<S sid ="79" ssid = "63">Well-typability only considers species if forced to.</S>
			<S sid ="80" ssid = "64">In the case of ~, well-typability can be estahlished by consklering type t alone, without the l)artition condition forcing one to find a well-typed species subsumed hy t. Consequently, well-tyl)ahility overlooks the part offl exehisively encoded by the ai)propriateness specifications for t&apos; and t&quot;.</S>
			<S sid ="81" ssid = "65">Type resolution, on the other hand, always considers species.</S>
			<S sid ="82" ssid = "66">Thus, type resolving 9o cannot overlook the part of p exclusively encoded by tile appropriateness specifications for t&apos; and t&apos;.</S>
	</SECTION>
	<SECTION title="MAINTAINING. " number = "3">
			<S sid ="83" ssid = "1">APPROPRIATENES S CONDITIONS A very important property of the class of DRFS is that they are closed under unification, i.e., if F and F&apos;E DRFS then F U F&apos; E DRFS.4 Given this property, it would in principle he possible to use the disjunctive resolved feature structures in an implementation without any additional type inferencing procedure to maintain satisfiability.</S>
			<S sid ="84" ssid = "2">It would, of course, not be very efficient to work with such large disjunctions of feature structures.</S>
			<S sid ="85" ssid = "3">4In fa.ct., it ~:~rl~ I)~ SI~OW ~ that if t&quot; a.nd 1&apos;&quot; 6 fS then &quot;R ( F) tJ 1&quot;(1&quot;&apos;) = &quot;R ( F tO F&apos;).</S>
			<S sid ="86" ssid = "4">Uni/ication of sets of fca.ture structures is defined here ill the standard way: S t2 ,S&quot; = {1&quot;[ I&quot;&apos; 6 S and l&quot;&quot; G S&quot; and 1&quot; = 1&quot;&apos; H 1&quot;&quot;}.</S>
			<S sid ="87" ssid = "5">(!rty a.llows a. disjultctivo fesolv(,d featur(, structti re to I)e r(;l)rosetd,(~d more et[icieutly a,s ~t sitlgle untyl)(~d l&apos;eatur(&apos; st.l&apos;ll(:l.llfe plus a, sel; of d(;pondlmt node la.h(~liugs, which ca.n be further (;oml)a,(:t(~d using mi, Nie(l dis.</S>
			<S sid ="88" ssid = "6">junction a.s in (&apos;,(~rdemann [(i], I)i&apos;~[&apos;re t(: Fo]&apos; exanH)le , SUl)l)OS(~ \v(~ I,,yl)(~ r(~solvc the [ea, l, urc st, ructure t[,f ; bool,fl; bool] using our encoding of p.</S>
			<S sid ="89" ssid = "7">()he can (rosily see tha.t this fea.tur(~ strut:fur(, has only two I&apos;e solwl, nts, which ca, n I)e colla.ps(~d iuto one fea,1;ure strlll:ttlro with llallV2d d]sjunci.ion a,s shown below: f:k , : :&gt; f: (I t -) II&apos;ll;1} [&quot;&apos;&quot;&apos; ] 0:t-LU: J ,u: (I t ) We now ha,vo a, [;(mSolml)ly COml)a(:l l&apos;q)-resentaJ;ion hi which t.ho l&quot;(il{, ha.s lie(Hi tl&apos;;tllsl;I,t(~([ iul,o a. Ila, ill(!(I ([iS.]llll(:l.ioli.</S>
			<S sid ="90" ssid = "8">Ih,w O,V(H&apos;&gt; (Hie should note tha, t fills dis.iun(: l;ion is only l)l&apos;eSeUl; b(~(:aats(~ the [&apos;oaJ, tli&apos;O~i .f a,]l(l g ha&gt;l)l)en 1:o I)o Fir(~s(HIt.</S>
			<S sid ="91" ssid = "9">Tilt!S(!</S>
			<S sid ="92" ssid = "10">I(,a tures would .eed l;o Im l)res(mt il w(~ wtwe enforchl&lt;ej (Jaxpcnl,(H&quot;s [:7] lcil, al w(ql i.yl)iug r(xluiroti]oilt ~ whhth ,qa,y&apos;s 1.1ial [(!al:ilr(&apos;s I. lial a,l:e a.llowed ilillSt 1)o pres,.ml., lllil.</S>
			<S sid ="93" ssid = "11">Iol.a[ well I.yping is, hi fax:t&gt; incoinl)a.lib]e ;villi lype resolul, ioli~ since I;hore lilil$&apos; w(ql I)o all inli llit;(~ seL of tota, lly w(,ll iyl)od I&apos;esolvalil.s of ;1 l&apos;(;a, Lllr(J st]&apos;llcttir(&apos;~, For (~xa.llipi(~, a.ll illi(lei&apos;.- Sl)ocifiod list stl&apos;u(&apos;tlir(&apos; couhl be iT(~S()/v0(I 1.o ;~ list of length (L a. list of h:ngl.h 1, el.c, ,qhlce I, ota.I well I,yliin g is liOt i&apos;(!quir(!([, we lm~y i~s well a.ctiwqy un[il[ r0(lulid;lnt [&apos;0a, tlires, 5 ill this (!Xalli[)l(!&gt; i[ t, li(&apos; f ail(l (7 fo.a, tllrOS ;~l&apos;e reliiovod, we a,lO lell wil, h lh(, simple, disjunction {if,/&apos;~}: which is (!quiv- a,lent, to l;]le or(lillaJ&apos;y l,Yl)(&apos; l.(; Thus, iu lliis ca, so&gt; ]lO (lisjtulcl, ion a.t all ix rc!(llliro(l 10 (!11&quot; force the I&quot;CIL All th&apos;,tt is requirc(I is tim ~qntuil, ively, [eat, ui&apos;cs arc rodundaui it Ilwir val llCS art&apos;.</S>
			<S sid ="94" ssid = "12">eul,h&apos;cl 5 predictaldc fl&apos;oui ihc approluiaic .ross Sl&gt;eCificatim,..%&apos;c GStz [1)], (&apos;,cr,lemam, [7] k,r ;I. IIlOl;(&apos;.</S>
			<S sid ="95" ssid = "13">[HXX:iHCforUllllalioii.</S>
			<S sid ="96" ssid = "14">°[n this casc, il.</S>
			<S sid ="97" ssid = "15">would also have b(:ml l)~&gt;,~iblc to unlill Lhc oi&apos;i&lt;eiuai teal, life Sll&apos;tl&lt;ltllc I,.I.ie I*&apos; solviug.</S>
			<S sid ="98" ssid = "16">/Snforl, unai,e, ly, llmvcvcr, this i~; l.&gt;i ;ihvay~.</S>
			<S sid ="99" ssid = "17">the (:asc, as C;lll |)(!</S>
			<S sid ="100" ssid = "18">S(!t&apos;II in the [ollowiug (!Xalll])lC: t{j: +] :&gt; {C/: +]} ~ ~&apos;.</S>
			<S sid ="101" ssid = "19">asSUml)tion tha.t t will only be ext(mded I)y unil&apos;ying il with a.lmther (t;Oml)a.ct(~d) m(mll)(!r o[&apos; &quot;l)&apos;]?.Jr,_c,.</S>
			<S sid ="102" ssid = "20">This, h.w(wer, wa.s a. simple ca.se iu which a.I1 of the named dis.jun(:tion could ho removed.</S>
			<S sid ="103" ssid = "21">It would not lmve I)(&apos;en i)os sihle to relnov(&apos; tim fea.tur(&apos;s f ~tll(I g if thest~ 17,atu[&apos;es had I)oen involved iu re(m-tranci(+s of i[&apos; tlt(,se lim.tures ha.d ha.d t:om- i)h+x va.lu(&apos;s, lu gt+tlera.I, howover, our eXl)e- ri(!ll(:(~ ha,s I)(~(ql that, eV(;l! wil, li very (:()tit pl(&apos;x type hi(~ra, rchi(~s a.nd |&apos;(m, tur(; SLI&apos;UC-l, lll&apos;eS [()1&quot; liPS(i, very i&apos;ow named (lisjunc-lions a, re introdu(&apos;e(l. 7 q&apos;hus~ uuilica.1;ion is e;(merally uo more (~xp(msive tha.n unifica.- li,:)H with unlylmd l(mt.ur(~ sl.fu(:l.ur(&apos;s.</S>
	</SECTION>
	<SECTION title="CONCLUSIONS. " number = "4">
			<S sid ="104" ssid = "1">\% havc~ sh,:Y, vu in this i~al),:~r tha.t the kind of consl raints ,:~Xl)r.t~ssihlo Ity api)Vol)rh~,l;or.~ss c~mdit.ions call he imlflemc&apos;.nted iN a i.&apos;actical .,.D, sle]n e,ul)loyinK typ,M featu r,:&apos;~ st.ru(:t.uf(,s and utdlica.Lion a.s I.he I:,ritna.ry Ol)(U&apos;a,t, ic:,n on t(&gt;;t,l, ur&lt;+ ,&apos;-;t, ruct, ure~.</S>
			<S sid ="105" ssid = "2">Ilut what.</S>
			<S sid ="106" ssid = "3">Of IIlOl&apos;(&apos; COIII[)I(~N l;yp(~ CC&apos;IIH|,F.~LilI|,,q it~v&apos;.)l&apos;,.&apos; h~y; r(~enl;ram:ies&apos;: [ntro(IL~ciug reeJH.ra.ncies illl.</S>
			<S sid ="107" ssid = "4">,::&lt;rest ralid.s allows E.&apos; the F,O~sihillty of d(~liNiu/,, recursivc l.yl),:~s ~ such a.s the (leli nitkm of append in [I].</S>
			<S sid ="108" ssid = "5">(;lea[&apos;ly the re ~olv;-~nl.~, o[ such a. recursiv(~ l.yl)(&apos;, could Not I)(~ l,reCOmlfiled a.s r,.~quiI&apos;oxl in Troll.</S>
			<S sid ="109" ssid = "6">Oue might, uew&apos;rtholoss, considm&apos; a l- [OWil]l[ f(&apos;(Hl(, f a, ll(&apos;y- (&apos;OIls t f a hI| S oll llollrecursiv(qy defiltcd l.ypcs.</S>
			<S sid ="110" ssid = "7">A ])ro/)leul still arises; nantcly, il lhe l&apos;eSo[va.itts of a Frail, till&apos;t1 .qll&apos;tlCI411&quot;(~ ill(:ludcd sonic with a pa.rticu lar r(~onll&apos;all(:y a.nd s()Tn(~ \viLh(&apos;,ul, then the (:,.)mliti()ll iliad, a.II resc)lva.uts ha.v(~ th,:~ same shal)(~ would m)lon~e[&apos; hold.</S>
			<S sid ="111" ssid = "8">()ue v.,ottkl l.her(q&apos;or,.~ no(~(l i.o eml)loy a moue COml)l(,x vorsion .r ,a.med (lis.it, f,t:tio, (Ill], [12], tit)I).</S>
			<S sid ="112" ssid = "9">It.</S>
			<S sid ="113" ssid = "10">ig (i,.L(~sti,.malfl(~ wh(&apos;thef such a.d ditional (:()mpl(~xit.y would I)e justified to &apos;Our CXl)ericl~(:c is derived l,&apos;imarily flora test-i.I&quot; Ihc &apos;l&apos;loll system (m a tat, her lar&lt;e,e e, ramul;G for (&apos;,(!l&gt;lll;lll imfiial vcrh I&gt;lHases, which was wiit-t(&apos;n I)y I&apos;hhard Ilillrichs a.d Tsum:ko Na, kazawa aud iinl)lclncut,cd by I)clmar McuH_:J&apos;s.</S>
			<S sid ="114" ssid = "11">handle this limited class of reentrancy- constraints.</S>
			<S sid ="115" ssid = "12">It seems then, that the class of constraints that can be expressed by appropriateness conditions corresponds closely to the class of constraints that can be efficiently preeompiled.</S>
			<S sid ="116" ssid = "13">We take this as a justification for appropriateness formalisms in general.</S>
			<S sid ="117" ssid = "14">It makes sense to ~d)straet out the efficiently processable constraints and then allow another mechalfiSm, such as attachments of definite clauses, to express more complex constraints.</S>
	</SECTION>
</PAPER>
