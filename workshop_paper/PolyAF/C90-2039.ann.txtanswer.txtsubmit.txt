Citance Number: 1 | Reference Article:  C90-2039.txt | Citing Article:  P99-1061-parscit-section.txt | Citation Marker Offset:  8313-8325 | Citation Marker:  Kogure, 1990 | Citation Offset:  8258-8532 | Citation Text:  Tomabechi's approach still suffers from what Kogure (Kogure, 1990) calls redundant copying. The new feature structures produced in the second phase of unification include copies of all the substructures of the input graphs, even when these structures are unchanged | Reference Offset: ['5703-5877'] | Reference Text:  In a natural language proeessing system that uses deelarative constraint rules in terms of FSs, FS unification provides constraint-checking and structure- building mechanisms | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 2 | Reference Article:  C90-2039.txt | Citing Article:  C92-1059-parscit-section.txt | Citation Marker Offset:  6942-6945 | Citation Marker:  16 | Citation Offset:  6820-6938 | Citation Text:  Based on this paper's formalization, unification algorithms have been developed using graph unification techniques[ ... 16] | Reference Offset: ['3496-3557'] | Reference Text:  A better method would nfinimize the copying of sharable varts | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 3 | Reference Article:  C90-2039.txt | Citing Article:  C92-1059-parscit-section.txt | Citation Marker Offset:  33181-33253 | Citation Marker:  16 | Citation Offset:  6942-6944 | Citation Text:  Other versions based on more efficient graph unification methods such as ... Kogure's method [ ... 16) | Reference Offset: ['1780-1904', '1906-2072'] | Reference Text:  In such unification-based formalisms, feature ~trueture (FS) unification is the most fundamental and ..~ignifieant operation...The efficiency of systems based on ..~uch formalisms, such as natural language analysis and generation systems very much depends on their FS ~lnifieatlon efficiencies | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 4 | Reference Article:  C90-2039.txt | Citing Article:  C90-3046-parscit-section.txt | Citation Marker Offset:  16013-16082 | Citation Marker:   6 | Citation Offset:  15870-16011 | Citation Text:  This is inefficient with many copy operations due to unifications of unnecessary features that do not contribute to successful unification [6] | Reference Offset: ['5703-5877'] | Reference Text:  In a natural language proeessing system that uses deelarative constraint rules in terms of FSs, FS unification provides constraint-checking and structure- building mechanisms | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 5 | Reference Article:  C90-2039.txt | Citing Article:  C90-3046-parscit-section.txt | Citation Marker Offset:  16060-16061 | Citation Marker:  6 | Citation Offset:  16009-16010 | Citation Text:  6 | Reference Offset: ['807-1132', '1150-1338'] | Reference Text:  The combined method .makes each feature structure unification efficient and also reduces garbage collection and page swapping occurrences, thus increasing the total efficiency of natural language processing systems mainly based on I.yped feature structure unification such as natural language analysis and generation sysl~ems...Various kinds of grammatical formalisms without t,ranstormation were proposed from the late 1970s I;hrough the 1980s l(]azder eL al 85, l(aplan and Bresnan 82, Kay 1~5, Pollm'd and Sag 871 | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 6 | Reference Article:  C90-2039.txt | Citing Article:  P91-1031-parscit-section.txt | Citation Marker Offset:  9332-9336 | Citation Marker:  1990 | Citation Offset:  9108-9337 | Citation Text:  Controlling the order in which operands are processed in conjunctions may save time if conjuncts can be processed first that are most likely to fail. This observation is the basis for a reordering method proposed by Kogure [1990] | Reference Offset: ['17353-17458'] | Reference Text:  Unification fails in treating arcs with common labels more often than in treating arcs with unique labels | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 7 | Reference Article:  C90-2039.txt | Citing Article:  P91-1031-parscit-section.txt | Citation Marker Offset:  11552-11563 | Citation Marker:  Kogure 1990 | Citation Offset:  11393-11565 | Citation Text:  Thus for any automatic counting scheme some constant shuffling and reshuffling of the conjunct order needs to be applied until the order stabilizes (see also [Kogure 1990]) | Reference Offset: ['17703-17774'] | Reference Text:  In Section 5, a method which uses this generalized strategy is proposed | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 8 | Reference Article:  C90-2039.txt | Citing Article:  E93-1008-parscit-section.txt | Citation Marker Offset:  8436-8537 | Citation Marker:  Kogure, 1990 | Citation Offset:  8373-8416 | Citation Text:  The lazy copying approach ([Kogure, 1990] ... for lazy copying in TFS with historical backtracking) copies only overlapping parts of the structure. | Reference Offset: ['17830-17925'] | Reference Text:  In Wroblewski's method, copying unique label arc values whole in order to treat cases like ]Pig | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 9 | Reference Article:  C90-2039.txt | Citing Article:  C92-2068-parscit-section.txt | Citation Marker Offset:  3576-3634 | Citation Marker:  Kogure, 1990 | Citation Offset:  3446-3545 | Citation Text:  At least two schemes have been proposed recently based upon this observation (namely [Kogure, 1990] ... both schemes are based upon the incremental copying scheme | Reference Offset: ['3122-3236'] | Reference Text:  itowever, the problem with his method is that a unitication result graph consists only of newly created structures | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 10 | Reference Article:  C90-2039.txt | Citing Article:  C92-2068-parscit-section.txt | Citation Marker Offset:  4450-4552 | Citation Marker:  Kogure, 1990 | Citation Offset:  3532-3544 | Citation Text:  Two or more distinct graphs share the same subgraph by converging on the same node - the notion of ... structure-sharing at the data structure level. [Kogure, 1990] calls copying of such structures Redundant Copying. | Reference Offset: ['3496-3557'] | Reference Text:  A better method would nfinimize the copying of sharable varts | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 11 | Reference Article:  C90-2039.txt | Citing Article:  P91-1041-parscit-section.txt | Citation Marker Offset:  3713-3725 | Citation Marker:  Kogure, 1990 | Citation Offset:  3555-3727 | Citation Text:  2In the large-scale HPSG-based spoken Japanese analysis system developed at ATR, sometimes 98 percent of the elapsed time is devoted to graph unification ([Kogure, 1990]) | Reference Offset: ['28762-28840'] | Reference Text:  In the Proceedings of the lateraationcd Workshop on Parsing Technologies, 1989 | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 12 | Reference Article:  C90-2039.txt | Citing Article:  P91-1041-parscit-section.txt | Citation Marker Offset:  40224-40236 | Citation Marker:  Kogure, 1990 | Citation Offset:  40089-40238 | Citation Text:  That is, unless some new scheme for reducing excessive copying is introduced such as structure-sharing of an unchanged shared-forest ([Kogure, 1990]) | Reference Offset:  ['2855-2980'] | Reference Text:  For example, a spoken Japanese analysis system based on llPSG[Kogure 89] uses 90% - 98% of the elapsed time in FS unification | Discourse Facet:  Results_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['23645-23775'] | Reference Text:  in the learning process, when FS unification is applied, feature treatment orders are randomized for the sake of random extraction | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 13 | Reference Article:  C90-2039.txt | Citing Article:  C94-2143-parscit-section.txt | Citation Marker Offset:  10637-10649 | Citation Marker:  Kogure, 1990 | Citation Offset:  10484-10650 | Citation Text:  A more efficient unification algorithm would avoid this redundant copying (copying structures that can be shared by the input and resultant graphs) (Kogure, 1990) | Reference Offset:  ['20444-20526', '3622-3940'] | Reference Text:  The LING unification method, which uses copy dependency information, was developed | This is unnecessary because there are often input subgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph. Copying sharable parts is called redundant copying. A better method would minimize the copying of sharable parts | Discourse Facet:  Method_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['3444-3494', '3496-3557'] | Reference Text:  Copying sharable parts is called redundant copying...A better method would nfinimize the copying of sharable varts | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 14 | Reference Article:  C90-2039.txt | Citing Article:  C94-2143-parscit-section.txt | Citation Marker Offset:  10637-10649 | Citation Marker:  Kogure, 1990 | Citation Offset:  12811-12922 | Citation Text:  Kogure (1990) proposed a lazy incremental copy graph (LING) unification that uses dependency-directed copying | Reference Offset:  ['3622-3940'] | Reference Text:  This is unnecessary because there are often input subgraphs that can be used as part of the result graph without any modification, or as sharable parts between one of the input graphs and the result graph. Copying sharable parts is called redundant copying. A better method would minimize the copying of sharable parts | Discourse Facet:  Method_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['25943-26059'] | Reference Text:  The LING unification method achieves structure sharing without the O(log d) data access overhead of Pereira's method | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 15 | Reference Article:  C90-2039.txt | Citing Article:  P91-1042-parscit-section.txt | Citation Marker Offset:  6808-6817 | Citation Marker:  Kogure 90 | Citation Offset:  6723-6818 | Citation Text:  A better method would avoid (eliminate) such redundant copying as it is called by [Kogure 90] | Reference Offset:  ['3828-3940'] | Reference Text:  Copying sharable parts is called redundant copying. A better method would minimize the copying of sharable parts | Discourse Facet:  Implication_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['3496-3557', '3559-3656'] | Reference Text:  A better method would nfinimize the copying of sharable varts...The redundantly copied parts are relatively large when input graphs have few common feature paths | Discourse Facet: Aim_Citation |  Annotator:  a |
Citance Number: 16 | Reference Article:  C90-2039.txt | Citing Article:  P91-1042-parscit-section.txt | Citation Marker Offset:  19566-19657 | Citation Marker:  Kogure 90 | Citation Offset:  19524-19549 | Citation Text:  As it has been noticed by ... [Kogure 90], the key idea of avoiding "redundant copying" is to do copying lazily ... Kogure uses a revised copynode procedure which maintains copy dependency information in order to avoid immediate copying ... Similarly, in Kogure's approach, not all redundant copying is avoided in cases where there exists a feature path (a sequence of nodes connected by arcs) to a node that needs to be copied. All the nodes along such a path must be copied, even if they are not affected by the unification procedure. Furthermore, special copy dependency information has to be maintained while copying nodes in order to trigger copying of such arc sequences leading to a node where copying is needed later in the process of unification. In addition to the overhead of storing copy dependency information, a second traversal of the set of dependent nodes is required for actually performing the copying. This copying itself might eventually trigger further copying of new dependent nodes | Reference Offset:  ['3828-3878', '20067-20252'] | Reference Text:  Copying sharable parts is called redundant copying ... However, this whole copying is not necessary if a lazy evaluation method is used. With such a method, it is possible to delay copying a node until either its own contents need to change | Discourse Facet:  Aim_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['19590-19776', '19845-19916'] | Reference Text:  When a new copy of a node is needed later, the LING unification procedure will actually copy structures using the COPY-DEPENDENCY slot value of the node (in GetOutNode procedure in lJ'ig...That is, antecedent nodes in the COPY-DEPENDENCY values are also copied | Discourse Facet: Method_Citation |  Annotator:  a |
Citance Number: 17 | Reference Article:  C90-2039.txt | Citing Article:  W97-1503-parscit-section.txt | Citation Marker Offset:  24744-24759 | Citation Marker:  Kogure, 1990 | Citation Offset:  24625-24724 | Citation Text:  carefully control and minimize the amount of copying needed with non-deterministic parsing schemata ... (Kogure, 1990); | Reference Offset:  ['3880-3940'] | Reference Text:  A better method would minimize the copying of sharable parts | Discourse Facet:  Method_Citation | Annotator:  Kokil Jaidka, NTU | Reference Offset: ['28762-28840', '28871-29038'] | Reference Text:  In the Proceedings of the lateraationcd Workshop on Parsing Technologies, 1989...Structure sharlngrepresentaLion for unificatiort-based formalisms, in the Proceedings of the 23rd Anttua[ Meeang of the Association for Computalianal Linguistics, 1985 | Discourse Facet: Method_Citation |  Annotator:  a |
